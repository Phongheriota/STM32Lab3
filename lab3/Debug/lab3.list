
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e24  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002f30  08002f30  00012f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f54  08002f54  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002f54  08002f54  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f54  08002f54  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f54  08002f54  00012f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f58  08002f58  00012f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002f5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000068  08002fc4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08002fc4  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a151  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f49  00000000  00000000  0002a1e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  0002c130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000998  00000000  00000000  0002cc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017394  00000000  00000000  0002d5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d056  00000000  00000000  00044934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000826b1  00000000  00000000  0005198a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d403b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029a4  00000000  00000000  000d4090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f18 	.word	0x08002f18

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002f18 	.word	0x08002f18

0800014c <all_led_off>:
 */

#include "all_led_off.h"

void all_led_off()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	2104      	movs	r1, #4
 8000154:	480e      	ldr	r0, [pc, #56]	; (8000190 <all_led_off+0x44>)
 8000156:	f001 feca 	bl	8001eee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(YEL1_GPIO_Port, YEL1_Pin, RESET);
 800015a:	2200      	movs	r2, #0
 800015c:	2108      	movs	r1, #8
 800015e:	480c      	ldr	r0, [pc, #48]	; (8000190 <all_led_off+0x44>)
 8000160:	f001 fec5 	bl	8001eee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GRE1_GPIO_Port, GRE1_Pin, RESET);
 8000164:	2200      	movs	r2, #0
 8000166:	2110      	movs	r1, #16
 8000168:	4809      	ldr	r0, [pc, #36]	; (8000190 <all_led_off+0x44>)
 800016a:	f001 fec0 	bl	8001eee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 800016e:	2200      	movs	r2, #0
 8000170:	2120      	movs	r1, #32
 8000172:	4807      	ldr	r0, [pc, #28]	; (8000190 <all_led_off+0x44>)
 8000174:	f001 febb 	bl	8001eee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(YEL2_GPIO_Port, YEL2_Pin, RESET);
 8000178:	2200      	movs	r2, #0
 800017a:	2140      	movs	r1, #64	; 0x40
 800017c:	4804      	ldr	r0, [pc, #16]	; (8000190 <all_led_off+0x44>)
 800017e:	f001 feb6 	bl	8001eee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GRE2_GPIO_Port, GRE2_Pin, RESET);
 8000182:	2200      	movs	r2, #0
 8000184:	2180      	movs	r1, #128	; 0x80
 8000186:	4802      	ldr	r0, [pc, #8]	; (8000190 <all_led_off+0x44>)
 8000188:	f001 feb1 	bl	8001eee <HAL_GPIO_WritePin>
	}
 800018c:	bf00      	nop
 800018e:	bd80      	pop	{r7, pc}
 8000190:	40010800 	.word	0x40010800

08000194 <fsm_automatic_run>:
int yel_sec= 2;
int gre_sec= 8;
extern	int count1=0;
extern	int count2=0;
extern  int index1=0;
  void fsm_automatic_run(){
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	  switch(status){
 8000198:	4ba4      	ldr	r3, [pc, #656]	; (800042c <fsm_automatic_run+0x298>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	3b01      	subs	r3, #1
 800019e:	2b04      	cmp	r3, #4
 80001a0:	f200 8258 	bhi.w	8000654 <fsm_automatic_run+0x4c0>
 80001a4:	a201      	add	r2, pc, #4	; (adr r2, 80001ac <fsm_automatic_run+0x18>)
 80001a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001aa:	bf00      	nop
 80001ac:	080001c1 	.word	0x080001c1
 80001b0:	08000225 	.word	0x08000225
 80001b4:	08000325 	.word	0x08000325
 80001b8:	08000459 	.word	0x08000459
 80001bc:	08000559 	.word	0x08000559
	  case INIT:
		  //TODO
		  status=RED_GRE;
 80001c0:	4b9a      	ldr	r3, [pc, #616]	; (800042c <fsm_automatic_run+0x298>)
 80001c2:	2202      	movs	r2, #2
 80001c4:	601a      	str	r2, [r3, #0]
	  	  setTimer(gre_sec*1000);
 80001c6:	4b9a      	ldr	r3, [pc, #616]	; (8000430 <fsm_automatic_run+0x29c>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001ce:	fb02 f303 	mul.w	r3, r2, r3
 80001d2:	4618      	mov	r0, r3
 80001d4:	f001 fa3a 	bl	800164c <setTimer>
	  	  setTimer1(1000);
 80001d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001dc:	f001 fa6a 	bl	80016b4 <setTimer1>
	  	  setTimer2(250);
 80001e0:	20fa      	movs	r0, #250	; 0xfa
 80001e2:	f001 fa9b 	bl	800171c <setTimer2>
  		  count1=red_sec;
 80001e6:	4b93      	ldr	r3, [pc, #588]	; (8000434 <fsm_automatic_run+0x2a0>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4a93      	ldr	r2, [pc, #588]	; (8000438 <fsm_automatic_run+0x2a4>)
 80001ec:	6013      	str	r3, [r2, #0]
  		  count2=gre_sec;
 80001ee:	4b90      	ldr	r3, [pc, #576]	; (8000430 <fsm_automatic_run+0x29c>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	4a92      	ldr	r2, [pc, #584]	; (800043c <fsm_automatic_run+0x2a8>)
 80001f4:	6013      	str	r3, [r2, #0]
	  	  if(isButton1Pressed())
 80001f6:	f000 fa51 	bl	800069c <isButton1Pressed>
 80001fa:	4603      	mov	r3, r0
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	f000 822b 	beq.w	8000658 <fsm_automatic_run+0x4c4>
	  	  {
	  		  all_led_off();
 8000202:	f7ff ffa3 	bl	800014c <all_led_off>
	  		  status=SET_RED;
 8000206:	4b89      	ldr	r3, [pc, #548]	; (800042c <fsm_automatic_run+0x298>)
 8000208:	220b      	movs	r2, #11
 800020a:	601a      	str	r2, [r3, #0]
	  		  setTimer(10000);
 800020c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000210:	f001 fa1c 	bl	800164c <setTimer>
	  		  setTimer1(1000);
 8000214:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000218:	f001 fa4c 	bl	80016b4 <setTimer1>
	  		  setTimer2(250);
 800021c:	20fa      	movs	r0, #250	; 0xfa
 800021e:	f001 fa7d 	bl	800171c <setTimer2>
	  	  }
  		  break;
 8000222:	e219      	b.n	8000658 <fsm_automatic_run+0x4c4>
  	  case RED_GRE:
  		  updateled(count1,count2);
 8000224:	4b84      	ldr	r3, [pc, #528]	; (8000438 <fsm_automatic_run+0x2a4>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a84      	ldr	r2, [pc, #528]	; (800043c <fsm_automatic_run+0x2a8>)
 800022a:	6812      	ldr	r2, [r2, #0]
 800022c:	4611      	mov	r1, r2
 800022e:	4618      	mov	r0, r3
 8000230:	f001 f86a 	bl	8001308 <updateled>
  		  if(timer_flag2==1)
 8000234:	4b82      	ldr	r3, [pc, #520]	; (8000440 <fsm_automatic_run+0x2ac>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	2b01      	cmp	r3, #1
 800023a:	d111      	bne.n	8000260 <fsm_automatic_run+0xcc>
  		  {
  			 update7SEG(index1++);
 800023c:	4b81      	ldr	r3, [pc, #516]	; (8000444 <fsm_automatic_run+0x2b0>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	1c5a      	adds	r2, r3, #1
 8000242:	4980      	ldr	r1, [pc, #512]	; (8000444 <fsm_automatic_run+0x2b0>)
 8000244:	600a      	str	r2, [r1, #0]
 8000246:	4618      	mov	r0, r3
 8000248:	f001 f830 	bl	80012ac <update7SEG>
  			if(index1>1)index1=0;
 800024c:	4b7d      	ldr	r3, [pc, #500]	; (8000444 <fsm_automatic_run+0x2b0>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	2b01      	cmp	r3, #1
 8000252:	dd02      	ble.n	800025a <fsm_automatic_run+0xc6>
 8000254:	4b7b      	ldr	r3, [pc, #492]	; (8000444 <fsm_automatic_run+0x2b0>)
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
  			 setTimer2(250);
 800025a:	20fa      	movs	r0, #250	; 0xfa
 800025c:	f001 fa5e 	bl	800171c <setTimer2>
  		  }
  		  if(timer_flag1==1)
 8000260:	4b79      	ldr	r3, [pc, #484]	; (8000448 <fsm_automatic_run+0x2b4>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	2b01      	cmp	r3, #1
 8000266:	d10d      	bne.n	8000284 <fsm_automatic_run+0xf0>
  		  {
  			  count1--;
 8000268:	4b73      	ldr	r3, [pc, #460]	; (8000438 <fsm_automatic_run+0x2a4>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	3b01      	subs	r3, #1
 800026e:	4a72      	ldr	r2, [pc, #456]	; (8000438 <fsm_automatic_run+0x2a4>)
 8000270:	6013      	str	r3, [r2, #0]
  			  count2--;
 8000272:	4b72      	ldr	r3, [pc, #456]	; (800043c <fsm_automatic_run+0x2a8>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	3b01      	subs	r3, #1
 8000278:	4a70      	ldr	r2, [pc, #448]	; (800043c <fsm_automatic_run+0x2a8>)
 800027a:	6013      	str	r3, [r2, #0]
  			  setTimer1(1000);
 800027c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000280:	f001 fa18 	bl	80016b4 <setTimer1>
  		  }
		  HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8000284:	2201      	movs	r2, #1
 8000286:	2104      	movs	r1, #4
 8000288:	4870      	ldr	r0, [pc, #448]	; (800044c <fsm_automatic_run+0x2b8>)
 800028a:	f001 fe30 	bl	8001eee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(YEL1_GPIO_Port, YEL1_Pin, RESET);
 800028e:	2200      	movs	r2, #0
 8000290:	2108      	movs	r1, #8
 8000292:	486e      	ldr	r0, [pc, #440]	; (800044c <fsm_automatic_run+0x2b8>)
 8000294:	f001 fe2b 	bl	8001eee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GRE1_GPIO_Port, GRE1_Pin, RESET);
 8000298:	2200      	movs	r2, #0
 800029a:	2110      	movs	r1, #16
 800029c:	486b      	ldr	r0, [pc, #428]	; (800044c <fsm_automatic_run+0x2b8>)
 800029e:	f001 fe26 	bl	8001eee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 80002a2:	2200      	movs	r2, #0
 80002a4:	2120      	movs	r1, #32
 80002a6:	4869      	ldr	r0, [pc, #420]	; (800044c <fsm_automatic_run+0x2b8>)
 80002a8:	f001 fe21 	bl	8001eee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(YEL2_GPIO_Port, YEL2_Pin, RESET);
 80002ac:	2200      	movs	r2, #0
 80002ae:	2140      	movs	r1, #64	; 0x40
 80002b0:	4866      	ldr	r0, [pc, #408]	; (800044c <fsm_automatic_run+0x2b8>)
 80002b2:	f001 fe1c 	bl	8001eee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GRE2_GPIO_Port, GRE2_Pin, SET);
 80002b6:	2201      	movs	r2, #1
 80002b8:	2180      	movs	r1, #128	; 0x80
 80002ba:	4864      	ldr	r0, [pc, #400]	; (800044c <fsm_automatic_run+0x2b8>)
 80002bc:	f001 fe17 	bl	8001eee <HAL_GPIO_WritePin>

		  if(timer_flag==1)
 80002c0:	4b63      	ldr	r3, [pc, #396]	; (8000450 <fsm_automatic_run+0x2bc>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d116      	bne.n	80002f6 <fsm_automatic_run+0x162>
		  {
			  status=RED_YEL;
 80002c8:	4b58      	ldr	r3, [pc, #352]	; (800042c <fsm_automatic_run+0x298>)
 80002ca:	2203      	movs	r2, #3
 80002cc:	601a      	str	r2, [r3, #0]
			  setTimer(yel_sec*1000);
 80002ce:	4b61      	ldr	r3, [pc, #388]	; (8000454 <fsm_automatic_run+0x2c0>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002d6:	fb02 f303 	mul.w	r3, r2, r3
 80002da:	4618      	mov	r0, r3
 80002dc:	f001 f9b6 	bl	800164c <setTimer>
		  	  setTimer1(1000);
 80002e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002e4:	f001 f9e6 	bl	80016b4 <setTimer1>
		  	  setTimer2(250);
 80002e8:	20fa      	movs	r0, #250	; 0xfa
 80002ea:	f001 fa17 	bl	800171c <setTimer2>
			  count2=yel_sec;
 80002ee:	4b59      	ldr	r3, [pc, #356]	; (8000454 <fsm_automatic_run+0x2c0>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4a52      	ldr	r2, [pc, #328]	; (800043c <fsm_automatic_run+0x2a8>)
 80002f4:	6013      	str	r3, [r2, #0]
		  }
	  	  if(isButton1Pressed())
 80002f6:	f000 f9d1 	bl	800069c <isButton1Pressed>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	f000 81ad 	beq.w	800065c <fsm_automatic_run+0x4c8>
	  	  {
	  		  all_led_off();
 8000302:	f7ff ff23 	bl	800014c <all_led_off>
	  		  status=SET_RED;
 8000306:	4b49      	ldr	r3, [pc, #292]	; (800042c <fsm_automatic_run+0x298>)
 8000308:	220b      	movs	r2, #11
 800030a:	601a      	str	r2, [r3, #0]
	  		  setTimer(10000);
 800030c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000310:	f001 f99c 	bl	800164c <setTimer>
	  		  setTimer1(500);
 8000314:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000318:	f001 f9cc 	bl	80016b4 <setTimer1>
	  		  setTimer2(250);
 800031c:	20fa      	movs	r0, #250	; 0xfa
 800031e:	f001 f9fd 	bl	800171c <setTimer2>
	  	  }
  		  break;
 8000322:	e19b      	b.n	800065c <fsm_automatic_run+0x4c8>
  	  case RED_YEL:
  		updateled(count1,count2);
 8000324:	4b44      	ldr	r3, [pc, #272]	; (8000438 <fsm_automatic_run+0x2a4>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a44      	ldr	r2, [pc, #272]	; (800043c <fsm_automatic_run+0x2a8>)
 800032a:	6812      	ldr	r2, [r2, #0]
 800032c:	4611      	mov	r1, r2
 800032e:	4618      	mov	r0, r3
 8000330:	f000 ffea 	bl	8001308 <updateled>
  		  		  if(timer_flag2==1)
 8000334:	4b42      	ldr	r3, [pc, #264]	; (8000440 <fsm_automatic_run+0x2ac>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2b01      	cmp	r3, #1
 800033a:	d111      	bne.n	8000360 <fsm_automatic_run+0x1cc>
  		  		  {
  		  			 update7SEG(index1++);
 800033c:	4b41      	ldr	r3, [pc, #260]	; (8000444 <fsm_automatic_run+0x2b0>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	1c5a      	adds	r2, r3, #1
 8000342:	4940      	ldr	r1, [pc, #256]	; (8000444 <fsm_automatic_run+0x2b0>)
 8000344:	600a      	str	r2, [r1, #0]
 8000346:	4618      	mov	r0, r3
 8000348:	f000 ffb0 	bl	80012ac <update7SEG>
  		  			if(index1>1)index1=0;
 800034c:	4b3d      	ldr	r3, [pc, #244]	; (8000444 <fsm_automatic_run+0x2b0>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	2b01      	cmp	r3, #1
 8000352:	dd02      	ble.n	800035a <fsm_automatic_run+0x1c6>
 8000354:	4b3b      	ldr	r3, [pc, #236]	; (8000444 <fsm_automatic_run+0x2b0>)
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
  		  			 setTimer2(250);
 800035a:	20fa      	movs	r0, #250	; 0xfa
 800035c:	f001 f9de 	bl	800171c <setTimer2>
  		  		  }
  		  		  if(timer_flag1==1)
 8000360:	4b39      	ldr	r3, [pc, #228]	; (8000448 <fsm_automatic_run+0x2b4>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	2b01      	cmp	r3, #1
 8000366:	d10d      	bne.n	8000384 <fsm_automatic_run+0x1f0>
  		  		  {
  		  			  count1--;
 8000368:	4b33      	ldr	r3, [pc, #204]	; (8000438 <fsm_automatic_run+0x2a4>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	3b01      	subs	r3, #1
 800036e:	4a32      	ldr	r2, [pc, #200]	; (8000438 <fsm_automatic_run+0x2a4>)
 8000370:	6013      	str	r3, [r2, #0]
  		  			  count2--;
 8000372:	4b32      	ldr	r3, [pc, #200]	; (800043c <fsm_automatic_run+0x2a8>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	3b01      	subs	r3, #1
 8000378:	4a30      	ldr	r2, [pc, #192]	; (800043c <fsm_automatic_run+0x2a8>)
 800037a:	6013      	str	r3, [r2, #0]
  		  			  setTimer1(1000);
 800037c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000380:	f001 f998 	bl	80016b4 <setTimer1>
  		  		  }
		  HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8000384:	2201      	movs	r2, #1
 8000386:	2104      	movs	r1, #4
 8000388:	4830      	ldr	r0, [pc, #192]	; (800044c <fsm_automatic_run+0x2b8>)
 800038a:	f001 fdb0 	bl	8001eee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(YEL1_GPIO_Port, YEL1_Pin, RESET);
 800038e:	2200      	movs	r2, #0
 8000390:	2108      	movs	r1, #8
 8000392:	482e      	ldr	r0, [pc, #184]	; (800044c <fsm_automatic_run+0x2b8>)
 8000394:	f001 fdab 	bl	8001eee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GRE1_GPIO_Port, GRE1_Pin, RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	2110      	movs	r1, #16
 800039c:	482b      	ldr	r0, [pc, #172]	; (800044c <fsm_automatic_run+0x2b8>)
 800039e:	f001 fda6 	bl	8001eee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 80003a2:	2200      	movs	r2, #0
 80003a4:	2120      	movs	r1, #32
 80003a6:	4829      	ldr	r0, [pc, #164]	; (800044c <fsm_automatic_run+0x2b8>)
 80003a8:	f001 fda1 	bl	8001eee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(YEL2_GPIO_Port, YEL2_Pin, SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	2140      	movs	r1, #64	; 0x40
 80003b0:	4826      	ldr	r0, [pc, #152]	; (800044c <fsm_automatic_run+0x2b8>)
 80003b2:	f001 fd9c 	bl	8001eee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GRE2_GPIO_Port, GRE2_Pin, RESET);
 80003b6:	2200      	movs	r2, #0
 80003b8:	2180      	movs	r1, #128	; 0x80
 80003ba:	4824      	ldr	r0, [pc, #144]	; (800044c <fsm_automatic_run+0x2b8>)
 80003bc:	f001 fd97 	bl	8001eee <HAL_GPIO_WritePin>
		  if(timer_flag==1)
 80003c0:	4b23      	ldr	r3, [pc, #140]	; (8000450 <fsm_automatic_run+0x2bc>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2b01      	cmp	r3, #1
 80003c6:	d11a      	bne.n	80003fe <fsm_automatic_run+0x26a>
		  {
			  count1=gre_sec;
 80003c8:	4b19      	ldr	r3, [pc, #100]	; (8000430 <fsm_automatic_run+0x29c>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a1a      	ldr	r2, [pc, #104]	; (8000438 <fsm_automatic_run+0x2a4>)
 80003ce:	6013      	str	r3, [r2, #0]
			  count2=red_sec;
 80003d0:	4b18      	ldr	r3, [pc, #96]	; (8000434 <fsm_automatic_run+0x2a0>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a19      	ldr	r2, [pc, #100]	; (800043c <fsm_automatic_run+0x2a8>)
 80003d6:	6013      	str	r3, [r2, #0]
			  status=GRE_RED;
 80003d8:	4b14      	ldr	r3, [pc, #80]	; (800042c <fsm_automatic_run+0x298>)
 80003da:	2204      	movs	r2, #4
 80003dc:	601a      	str	r2, [r3, #0]
			  setTimer(gre_sec*1000);
 80003de:	4b14      	ldr	r3, [pc, #80]	; (8000430 <fsm_automatic_run+0x29c>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003e6:	fb02 f303 	mul.w	r3, r2, r3
 80003ea:	4618      	mov	r0, r3
 80003ec:	f001 f92e 	bl	800164c <setTimer>
		  	  setTimer1(1000);
 80003f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003f4:	f001 f95e 	bl	80016b4 <setTimer1>
		  	  setTimer2(250);
 80003f8:	20fa      	movs	r0, #250	; 0xfa
 80003fa:	f001 f98f 	bl	800171c <setTimer2>
		  }
	  	  if(isButton1Pressed())
 80003fe:	f000 f94d 	bl	800069c <isButton1Pressed>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	f000 812b 	beq.w	8000660 <fsm_automatic_run+0x4cc>
	  	  {
	  		  all_led_off();
 800040a:	f7ff fe9f 	bl	800014c <all_led_off>
	  		  status=SET_RED;
 800040e:	4b07      	ldr	r3, [pc, #28]	; (800042c <fsm_automatic_run+0x298>)
 8000410:	220b      	movs	r2, #11
 8000412:	601a      	str	r2, [r3, #0]
	  		  setTimer(10000);
 8000414:	f242 7010 	movw	r0, #10000	; 0x2710
 8000418:	f001 f918 	bl	800164c <setTimer>
	  		  setTimer1(500);
 800041c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000420:	f001 f948 	bl	80016b4 <setTimer1>
	  		  setTimer2(250);
 8000424:	20fa      	movs	r0, #250	; 0xfa
 8000426:	f001 f979 	bl	800171c <setTimer2>
	  	  }
  		  break;
 800042a:	e119      	b.n	8000660 <fsm_automatic_run+0x4cc>
 800042c:	2000009c 	.word	0x2000009c
 8000430:	20000008 	.word	0x20000008
 8000434:	20000000 	.word	0x20000000
 8000438:	20000084 	.word	0x20000084
 800043c:	20000088 	.word	0x20000088
 8000440:	200000b4 	.word	0x200000b4
 8000444:	2000008c 	.word	0x2000008c
 8000448:	200000ac 	.word	0x200000ac
 800044c:	40010800 	.word	0x40010800
 8000450:	200000a4 	.word	0x200000a4
 8000454:	20000004 	.word	0x20000004
  	  case GRE_RED:
    	updateled(count1,count2);
 8000458:	4b85      	ldr	r3, [pc, #532]	; (8000670 <fsm_automatic_run+0x4dc>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a85      	ldr	r2, [pc, #532]	; (8000674 <fsm_automatic_run+0x4e0>)
 800045e:	6812      	ldr	r2, [r2, #0]
 8000460:	4611      	mov	r1, r2
 8000462:	4618      	mov	r0, r3
 8000464:	f000 ff50 	bl	8001308 <updateled>
    		  		  if(timer_flag2==1)
 8000468:	4b83      	ldr	r3, [pc, #524]	; (8000678 <fsm_automatic_run+0x4e4>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	2b01      	cmp	r3, #1
 800046e:	d111      	bne.n	8000494 <fsm_automatic_run+0x300>
    		  		  {
    		  			 update7SEG(index1++);
 8000470:	4b82      	ldr	r3, [pc, #520]	; (800067c <fsm_automatic_run+0x4e8>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	1c5a      	adds	r2, r3, #1
 8000476:	4981      	ldr	r1, [pc, #516]	; (800067c <fsm_automatic_run+0x4e8>)
 8000478:	600a      	str	r2, [r1, #0]
 800047a:	4618      	mov	r0, r3
 800047c:	f000 ff16 	bl	80012ac <update7SEG>
    		  			if(index1>1)index1=0;
 8000480:	4b7e      	ldr	r3, [pc, #504]	; (800067c <fsm_automatic_run+0x4e8>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	2b01      	cmp	r3, #1
 8000486:	dd02      	ble.n	800048e <fsm_automatic_run+0x2fa>
 8000488:	4b7c      	ldr	r3, [pc, #496]	; (800067c <fsm_automatic_run+0x4e8>)
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
    		  			 setTimer2(250);
 800048e:	20fa      	movs	r0, #250	; 0xfa
 8000490:	f001 f944 	bl	800171c <setTimer2>
    		  		  }
    		  		  if(timer_flag1==1)
 8000494:	4b7a      	ldr	r3, [pc, #488]	; (8000680 <fsm_automatic_run+0x4ec>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2b01      	cmp	r3, #1
 800049a:	d10d      	bne.n	80004b8 <fsm_automatic_run+0x324>
    		  		  {
    		  			  count1--;
 800049c:	4b74      	ldr	r3, [pc, #464]	; (8000670 <fsm_automatic_run+0x4dc>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	3b01      	subs	r3, #1
 80004a2:	4a73      	ldr	r2, [pc, #460]	; (8000670 <fsm_automatic_run+0x4dc>)
 80004a4:	6013      	str	r3, [r2, #0]
    		  			  count2--;
 80004a6:	4b73      	ldr	r3, [pc, #460]	; (8000674 <fsm_automatic_run+0x4e0>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	3b01      	subs	r3, #1
 80004ac:	4a71      	ldr	r2, [pc, #452]	; (8000674 <fsm_automatic_run+0x4e0>)
 80004ae:	6013      	str	r3, [r2, #0]
    		  			  setTimer1(1000);
 80004b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004b4:	f001 f8fe 	bl	80016b4 <setTimer1>
    		  		  }
		  HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 80004b8:	2200      	movs	r2, #0
 80004ba:	2104      	movs	r1, #4
 80004bc:	4871      	ldr	r0, [pc, #452]	; (8000684 <fsm_automatic_run+0x4f0>)
 80004be:	f001 fd16 	bl	8001eee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(YEL1_GPIO_Port, YEL1_Pin, RESET);
 80004c2:	2200      	movs	r2, #0
 80004c4:	2108      	movs	r1, #8
 80004c6:	486f      	ldr	r0, [pc, #444]	; (8000684 <fsm_automatic_run+0x4f0>)
 80004c8:	f001 fd11 	bl	8001eee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GRE1_GPIO_Port, GRE1_Pin, SET);
 80004cc:	2201      	movs	r2, #1
 80004ce:	2110      	movs	r1, #16
 80004d0:	486c      	ldr	r0, [pc, #432]	; (8000684 <fsm_automatic_run+0x4f0>)
 80004d2:	f001 fd0c 	bl	8001eee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 80004d6:	2201      	movs	r2, #1
 80004d8:	2120      	movs	r1, #32
 80004da:	486a      	ldr	r0, [pc, #424]	; (8000684 <fsm_automatic_run+0x4f0>)
 80004dc:	f001 fd07 	bl	8001eee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(YEL2_GPIO_Port, YEL2_Pin, RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2140      	movs	r1, #64	; 0x40
 80004e4:	4867      	ldr	r0, [pc, #412]	; (8000684 <fsm_automatic_run+0x4f0>)
 80004e6:	f001 fd02 	bl	8001eee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GRE2_GPIO_Port, GRE2_Pin, RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2180      	movs	r1, #128	; 0x80
 80004ee:	4865      	ldr	r0, [pc, #404]	; (8000684 <fsm_automatic_run+0x4f0>)
 80004f0:	f001 fcfd 	bl	8001eee <HAL_GPIO_WritePin>
		  if(timer_flag==1)
 80004f4:	4b64      	ldr	r3, [pc, #400]	; (8000688 <fsm_automatic_run+0x4f4>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d116      	bne.n	800052a <fsm_automatic_run+0x396>
		  {
			  count1=yel_sec;
 80004fc:	4b63      	ldr	r3, [pc, #396]	; (800068c <fsm_automatic_run+0x4f8>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a5b      	ldr	r2, [pc, #364]	; (8000670 <fsm_automatic_run+0x4dc>)
 8000502:	6013      	str	r3, [r2, #0]
			  status=YEL_RED;
 8000504:	4b62      	ldr	r3, [pc, #392]	; (8000690 <fsm_automatic_run+0x4fc>)
 8000506:	2205      	movs	r2, #5
 8000508:	601a      	str	r2, [r3, #0]
			  setTimer(yel_sec*1000);
 800050a:	4b60      	ldr	r3, [pc, #384]	; (800068c <fsm_automatic_run+0x4f8>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000512:	fb02 f303 	mul.w	r3, r2, r3
 8000516:	4618      	mov	r0, r3
 8000518:	f001 f898 	bl	800164c <setTimer>
		  	  setTimer1(1000);
 800051c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000520:	f001 f8c8 	bl	80016b4 <setTimer1>
		  	  setTimer2(250);
 8000524:	20fa      	movs	r0, #250	; 0xfa
 8000526:	f001 f8f9 	bl	800171c <setTimer2>
		  }
	  	  if(isButton1Pressed())
 800052a:	f000 f8b7 	bl	800069c <isButton1Pressed>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	f000 8097 	beq.w	8000664 <fsm_automatic_run+0x4d0>
	  	  {
	  		  all_led_off();
 8000536:	f7ff fe09 	bl	800014c <all_led_off>
	  		  status=SET_RED;
 800053a:	4b55      	ldr	r3, [pc, #340]	; (8000690 <fsm_automatic_run+0x4fc>)
 800053c:	220b      	movs	r2, #11
 800053e:	601a      	str	r2, [r3, #0]
	  		  setTimer(10000);
 8000540:	f242 7010 	movw	r0, #10000	; 0x2710
 8000544:	f001 f882 	bl	800164c <setTimer>
	  		  setTimer1(500);
 8000548:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800054c:	f001 f8b2 	bl	80016b4 <setTimer1>
	  		  setTimer2(250);
 8000550:	20fa      	movs	r0, #250	; 0xfa
 8000552:	f001 f8e3 	bl	800171c <setTimer2>
	  	  }
  		  break;
 8000556:	e085      	b.n	8000664 <fsm_automatic_run+0x4d0>
  	  case YEL_RED:
      	updateled(count1,count2);
 8000558:	4b45      	ldr	r3, [pc, #276]	; (8000670 <fsm_automatic_run+0x4dc>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a45      	ldr	r2, [pc, #276]	; (8000674 <fsm_automatic_run+0x4e0>)
 800055e:	6812      	ldr	r2, [r2, #0]
 8000560:	4611      	mov	r1, r2
 8000562:	4618      	mov	r0, r3
 8000564:	f000 fed0 	bl	8001308 <updateled>
      		  		  if(timer_flag2==1)
 8000568:	4b43      	ldr	r3, [pc, #268]	; (8000678 <fsm_automatic_run+0x4e4>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2b01      	cmp	r3, #1
 800056e:	d111      	bne.n	8000594 <fsm_automatic_run+0x400>
      		  		  {
      		  			 update7SEG(index1++);
 8000570:	4b42      	ldr	r3, [pc, #264]	; (800067c <fsm_automatic_run+0x4e8>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	1c5a      	adds	r2, r3, #1
 8000576:	4941      	ldr	r1, [pc, #260]	; (800067c <fsm_automatic_run+0x4e8>)
 8000578:	600a      	str	r2, [r1, #0]
 800057a:	4618      	mov	r0, r3
 800057c:	f000 fe96 	bl	80012ac <update7SEG>
      		  			if(index1>1)index1=0;
 8000580:	4b3e      	ldr	r3, [pc, #248]	; (800067c <fsm_automatic_run+0x4e8>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b01      	cmp	r3, #1
 8000586:	dd02      	ble.n	800058e <fsm_automatic_run+0x3fa>
 8000588:	4b3c      	ldr	r3, [pc, #240]	; (800067c <fsm_automatic_run+0x4e8>)
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
      		  			 setTimer2(250);
 800058e:	20fa      	movs	r0, #250	; 0xfa
 8000590:	f001 f8c4 	bl	800171c <setTimer2>
      		  		  }
      		  		  if(timer_flag1==1)
 8000594:	4b3a      	ldr	r3, [pc, #232]	; (8000680 <fsm_automatic_run+0x4ec>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d10d      	bne.n	80005b8 <fsm_automatic_run+0x424>
      		  		  {
      		  			  count1--;
 800059c:	4b34      	ldr	r3, [pc, #208]	; (8000670 <fsm_automatic_run+0x4dc>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	3b01      	subs	r3, #1
 80005a2:	4a33      	ldr	r2, [pc, #204]	; (8000670 <fsm_automatic_run+0x4dc>)
 80005a4:	6013      	str	r3, [r2, #0]
      		  			  count2--;
 80005a6:	4b33      	ldr	r3, [pc, #204]	; (8000674 <fsm_automatic_run+0x4e0>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	3b01      	subs	r3, #1
 80005ac:	4a31      	ldr	r2, [pc, #196]	; (8000674 <fsm_automatic_run+0x4e0>)
 80005ae:	6013      	str	r3, [r2, #0]
      		  			  setTimer1(1000);
 80005b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005b4:	f001 f87e 	bl	80016b4 <setTimer1>
      		  		  }
		  HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2104      	movs	r1, #4
 80005bc:	4831      	ldr	r0, [pc, #196]	; (8000684 <fsm_automatic_run+0x4f0>)
 80005be:	f001 fc96 	bl	8001eee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(YEL1_GPIO_Port, YEL1_Pin, SET);
 80005c2:	2201      	movs	r2, #1
 80005c4:	2108      	movs	r1, #8
 80005c6:	482f      	ldr	r0, [pc, #188]	; (8000684 <fsm_automatic_run+0x4f0>)
 80005c8:	f001 fc91 	bl	8001eee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GRE1_GPIO_Port, GRE1_Pin, RESET);
 80005cc:	2200      	movs	r2, #0
 80005ce:	2110      	movs	r1, #16
 80005d0:	482c      	ldr	r0, [pc, #176]	; (8000684 <fsm_automatic_run+0x4f0>)
 80005d2:	f001 fc8c 	bl	8001eee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 80005d6:	2201      	movs	r2, #1
 80005d8:	2120      	movs	r1, #32
 80005da:	482a      	ldr	r0, [pc, #168]	; (8000684 <fsm_automatic_run+0x4f0>)
 80005dc:	f001 fc87 	bl	8001eee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(YEL2_GPIO_Port, YEL2_Pin, RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2140      	movs	r1, #64	; 0x40
 80005e4:	4827      	ldr	r0, [pc, #156]	; (8000684 <fsm_automatic_run+0x4f0>)
 80005e6:	f001 fc82 	bl	8001eee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GRE2_GPIO_Port, GRE2_Pin, RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2180      	movs	r1, #128	; 0x80
 80005ee:	4825      	ldr	r0, [pc, #148]	; (8000684 <fsm_automatic_run+0x4f0>)
 80005f0:	f001 fc7d 	bl	8001eee <HAL_GPIO_WritePin>
		  if(timer_flag==1)
 80005f4:	4b24      	ldr	r3, [pc, #144]	; (8000688 <fsm_automatic_run+0x4f4>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d115      	bne.n	8000628 <fsm_automatic_run+0x494>
		  {
			  count1=red_sec;
 80005fc:	4b25      	ldr	r3, [pc, #148]	; (8000694 <fsm_automatic_run+0x500>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a1b      	ldr	r2, [pc, #108]	; (8000670 <fsm_automatic_run+0x4dc>)
 8000602:	6013      	str	r3, [r2, #0]
			  count2=gre_sec;
 8000604:	4b24      	ldr	r3, [pc, #144]	; (8000698 <fsm_automatic_run+0x504>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a1a      	ldr	r2, [pc, #104]	; (8000674 <fsm_automatic_run+0x4e0>)
 800060a:	6013      	str	r3, [r2, #0]
			  status=RED_GRE;
 800060c:	4b20      	ldr	r3, [pc, #128]	; (8000690 <fsm_automatic_run+0x4fc>)
 800060e:	2202      	movs	r2, #2
 8000610:	601a      	str	r2, [r3, #0]
			  setTimer(2000);
 8000612:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000616:	f001 f819 	bl	800164c <setTimer>
		  	  setTimer1(1000);
 800061a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800061e:	f001 f849 	bl	80016b4 <setTimer1>
		  	  setTimer2(250);
 8000622:	20fa      	movs	r0, #250	; 0xfa
 8000624:	f001 f87a 	bl	800171c <setTimer2>
		  }
	  	  if(isButton1Pressed())
 8000628:	f000 f838 	bl	800069c <isButton1Pressed>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d01a      	beq.n	8000668 <fsm_automatic_run+0x4d4>
	  	  {
	  		  all_led_off();
 8000632:	f7ff fd8b 	bl	800014c <all_led_off>
	  		  status=SET_RED;
 8000636:	4b16      	ldr	r3, [pc, #88]	; (8000690 <fsm_automatic_run+0x4fc>)
 8000638:	220b      	movs	r2, #11
 800063a:	601a      	str	r2, [r3, #0]
	  		  setTimer(10000);
 800063c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000640:	f001 f804 	bl	800164c <setTimer>
	  		  setTimer1(500);
 8000644:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000648:	f001 f834 	bl	80016b4 <setTimer1>
	  		  setTimer2(250);
 800064c:	20fa      	movs	r0, #250	; 0xfa
 800064e:	f001 f865 	bl	800171c <setTimer2>
	  	  }
		  break;
 8000652:	e009      	b.n	8000668 <fsm_automatic_run+0x4d4>
  	  default :
  		  break;
 8000654:	bf00      	nop
 8000656:	e008      	b.n	800066a <fsm_automatic_run+0x4d6>
  		  break;
 8000658:	bf00      	nop
 800065a:	e006      	b.n	800066a <fsm_automatic_run+0x4d6>
  		  break;
 800065c:	bf00      	nop
 800065e:	e004      	b.n	800066a <fsm_automatic_run+0x4d6>
  		  break;
 8000660:	bf00      	nop
 8000662:	e002      	b.n	800066a <fsm_automatic_run+0x4d6>
  		  break;
 8000664:	bf00      	nop
 8000666:	e000      	b.n	800066a <fsm_automatic_run+0x4d6>
		  break;
 8000668:	bf00      	nop
  	  }
  }
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000084 	.word	0x20000084
 8000674:	20000088 	.word	0x20000088
 8000678:	200000b4 	.word	0x200000b4
 800067c:	2000008c 	.word	0x2000008c
 8000680:	200000ac 	.word	0x200000ac
 8000684:	40010800 	.word	0x40010800
 8000688:	200000a4 	.word	0x200000a4
 800068c:	20000004 	.word	0x20000004
 8000690:	2000009c 	.word	0x2000009c
 8000694:	20000000 	.word	0x20000000
 8000698:	20000008 	.word	0x20000008

0800069c <isButton1Pressed>:
int TimeOutForKeyPress =500;
int button1_pressed = 0;
int button1_long_pressed = 0;
int button1_flag = 0;

int isButton1Pressed(){
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <isButton1Pressed+0x20>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d104      	bne.n	80006b2 <isButton1Pressed+0x16>
		button1_flag = 0;
 80006a8:	4b04      	ldr	r3, [pc, #16]	; (80006bc <isButton1Pressed+0x20>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
		return 1;
 80006ae:	2301      	movs	r3, #1
 80006b0:	e000      	b.n	80006b4 <isButton1Pressed+0x18>
	}
	return 0;
 80006b2:	2300      	movs	r3, #0
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr
 80006bc:	20000090 	.word	0x20000090

080006c0 <subKeyProcess>:
		return 1;
	}
	return 0;
}

void subKeyProcess(){
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
	//TODO
	button1_flag = 1;
 80006c4:	4b03      	ldr	r3, [pc, #12]	; (80006d4 <subKeyProcess+0x14>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	601a      	str	r2, [r3, #0]
}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	20000090 	.word	0x20000090

080006d8 <getKeyInput>:

void getKeyInput(){
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  KeyReg0 = KeyReg1;
 80006dc:	4b24      	ldr	r3, [pc, #144]	; (8000770 <getKeyInput+0x98>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a24      	ldr	r2, [pc, #144]	; (8000774 <getKeyInput+0x9c>)
 80006e2:	6013      	str	r3, [r2, #0]
  KeyReg1 = KeyReg2;
 80006e4:	4b24      	ldr	r3, [pc, #144]	; (8000778 <getKeyInput+0xa0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a21      	ldr	r2, [pc, #132]	; (8000770 <getKeyInput+0x98>)
 80006ea:	6013      	str	r3, [r2, #0]
  // Add your key
  KeyReg2 = HAL_GPIO_ReadPin(BUT1_GPIO_Port, BUT1_Pin);
 80006ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f0:	4822      	ldr	r0, [pc, #136]	; (800077c <getKeyInput+0xa4>)
 80006f2:	f001 fbe5 	bl	8001ec0 <HAL_GPIO_ReadPin>
 80006f6:	4603      	mov	r3, r0
 80006f8:	461a      	mov	r2, r3
 80006fa:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <getKeyInput+0xa0>)
 80006fc:	601a      	str	r2, [r3, #0]

  if ((KeyReg0 == KeyReg1) && (KeyReg1 == KeyReg2)){
 80006fe:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <getKeyInput+0x9c>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <getKeyInput+0x98>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	429a      	cmp	r2, r3
 8000708:	d130      	bne.n	800076c <getKeyInput+0x94>
 800070a:	4b19      	ldr	r3, [pc, #100]	; (8000770 <getKeyInput+0x98>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <getKeyInput+0xa0>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	429a      	cmp	r2, r3
 8000714:	d12a      	bne.n	800076c <getKeyInput+0x94>
    if (KeyReg2!= KeyReg3){
 8000716:	4b18      	ldr	r3, [pc, #96]	; (8000778 <getKeyInput+0xa0>)
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	4b19      	ldr	r3, [pc, #100]	; (8000780 <getKeyInput+0xa8>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	429a      	cmp	r2, r3
 8000720:	d010      	beq.n	8000744 <getKeyInput+0x6c>
      KeyReg3 = KeyReg2;
 8000722:	4b15      	ldr	r3, [pc, #84]	; (8000778 <getKeyInput+0xa0>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a16      	ldr	r2, [pc, #88]	; (8000780 <getKeyInput+0xa8>)
 8000728:	6013      	str	r3, [r2, #0]
      if (KeyReg3 == PRESSED_STATE){
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <getKeyInput+0xa8>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d11c      	bne.n	800076c <getKeyInput+0x94>
        TimeOutForKeyPress = 150;
 8000732:	4b14      	ldr	r3, [pc, #80]	; (8000784 <getKeyInput+0xac>)
 8000734:	2296      	movs	r2, #150	; 0x96
 8000736:	601a      	str	r2, [r3, #0]
        subKeyProcess();
 8000738:	f7ff ffc2 	bl	80006c0 <subKeyProcess>
        button1_flag = 1;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <getKeyInput+0xb0>)
 800073e:	2201      	movs	r2, #1
 8000740:	601a      	str	r2, [r3, #0]
        		button1_flag = 1;
        	}
        }
    }
  }
}
 8000742:	e013      	b.n	800076c <getKeyInput+0x94>
        TimeOutForKeyPress --;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <getKeyInput+0xac>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	3b01      	subs	r3, #1
 800074a:	4a0e      	ldr	r2, [pc, #56]	; (8000784 <getKeyInput+0xac>)
 800074c:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress == 0){
 800074e:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <getKeyInput+0xac>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d10a      	bne.n	800076c <getKeyInput+0x94>
        	TimeOutForKeyPress = 500;
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <getKeyInput+0xac>)
 8000758:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800075c:	601a      	str	r2, [r3, #0]
        	if (KeyReg3 == PRESSED_STATE){
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <getKeyInput+0xa8>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d102      	bne.n	800076c <getKeyInput+0x94>
        		button1_flag = 1;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <getKeyInput+0xb0>)
 8000768:	2201      	movs	r2, #1
 800076a:	601a      	str	r2, [r3, #0]
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000010 	.word	0x20000010
 8000774:	2000000c 	.word	0x2000000c
 8000778:	20000014 	.word	0x20000014
 800077c:	40010800 	.word	0x40010800
 8000780:	20000018 	.word	0x20000018
 8000784:	2000001c 	.word	0x2000001c
 8000788:	20000090 	.word	0x20000090

0800078c <isButton2Pressed>:
int TimeOutForKeyPress2 =  500;
int button2_pressed = 0;
int button2_long_pressed = 0;
int button2_flag = 0;

int isButton2Pressed(){
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <isButton2Pressed+0x20>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d104      	bne.n	80007a2 <isButton2Pressed+0x16>
		button2_flag = 0;
 8000798:	4b04      	ldr	r3, [pc, #16]	; (80007ac <isButton2Pressed+0x20>)
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
		return 2;
 800079e:	2302      	movs	r3, #2
 80007a0:	e000      	b.n	80007a4 <isButton2Pressed+0x18>
	}
	return 0;
 80007a2:	2300      	movs	r3, #0
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr
 80007ac:	20000094 	.word	0x20000094

080007b0 <subKeyProcess2>:
		return 1;
	}
	return 0;
}

void subKeyProcess2(){
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
	//TODO
	//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	button2_flag = 1;
 80007b4:	4b03      	ldr	r3, [pc, #12]	; (80007c4 <subKeyProcess2+0x14>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	601a      	str	r2, [r3, #0]
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	20000094 	.word	0x20000094

080007c8 <getKeyInput2>:

void getKeyInput2(){
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  KeyReg0_2 = KeyReg1_2;
 80007cc:	4b24      	ldr	r3, [pc, #144]	; (8000860 <getKeyInput2+0x98>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a24      	ldr	r2, [pc, #144]	; (8000864 <getKeyInput2+0x9c>)
 80007d2:	6013      	str	r3, [r2, #0]
  KeyReg1_2 = KeyReg2_2;
 80007d4:	4b24      	ldr	r3, [pc, #144]	; (8000868 <getKeyInput2+0xa0>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a21      	ldr	r2, [pc, #132]	; (8000860 <getKeyInput2+0x98>)
 80007da:	6013      	str	r3, [r2, #0]
  // Add your key
  KeyReg2_2 = HAL_GPIO_ReadPin(BUT2_GPIO_Port, BUT2_Pin);
 80007dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e0:	4822      	ldr	r0, [pc, #136]	; (800086c <getKeyInput2+0xa4>)
 80007e2:	f001 fb6d 	bl	8001ec0 <HAL_GPIO_ReadPin>
 80007e6:	4603      	mov	r3, r0
 80007e8:	461a      	mov	r2, r3
 80007ea:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <getKeyInput2+0xa0>)
 80007ec:	601a      	str	r2, [r3, #0]

  if ((KeyReg1_2 == KeyReg0_2) && (KeyReg1_2 == KeyReg2_2)){
 80007ee:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <getKeyInput2+0x98>)
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <getKeyInput2+0x9c>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d130      	bne.n	800085c <getKeyInput2+0x94>
 80007fa:	4b19      	ldr	r3, [pc, #100]	; (8000860 <getKeyInput2+0x98>)
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <getKeyInput2+0xa0>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	429a      	cmp	r2, r3
 8000804:	d12a      	bne.n	800085c <getKeyInput2+0x94>
    if (KeyReg2_2 != KeyReg3_2){
 8000806:	4b18      	ldr	r3, [pc, #96]	; (8000868 <getKeyInput2+0xa0>)
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	4b19      	ldr	r3, [pc, #100]	; (8000870 <getKeyInput2+0xa8>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	429a      	cmp	r2, r3
 8000810:	d010      	beq.n	8000834 <getKeyInput2+0x6c>
      KeyReg3_2 = KeyReg2_2;
 8000812:	4b15      	ldr	r3, [pc, #84]	; (8000868 <getKeyInput2+0xa0>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a16      	ldr	r2, [pc, #88]	; (8000870 <getKeyInput2+0xa8>)
 8000818:	6013      	str	r3, [r2, #0]

      if (KeyReg3_2 == PRESSED_STATE){
 800081a:	4b15      	ldr	r3, [pc, #84]	; (8000870 <getKeyInput2+0xa8>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d11c      	bne.n	800085c <getKeyInput2+0x94>
          TimeOutForKeyPress2 = 150;
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <getKeyInput2+0xac>)
 8000824:	2296      	movs	r2, #150	; 0x96
 8000826:	601a      	str	r2, [r3, #0]
          subKeyProcess2();
 8000828:	f7ff ffc2 	bl	80007b0 <subKeyProcess2>
          button2_flag = 1;
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <getKeyInput2+0xb0>)
 800082e:	2201      	movs	r2, #1
 8000830:	601a      	str	r2, [r3, #0]
        		button2_flag = 1;
        	}
        }
    }
  }
}
 8000832:	e013      	b.n	800085c <getKeyInput2+0x94>
        TimeOutForKeyPress2 --;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <getKeyInput2+0xac>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	3b01      	subs	r3, #1
 800083a:	4a0e      	ldr	r2, [pc, #56]	; (8000874 <getKeyInput2+0xac>)
 800083c:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress2 == 0){
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <getKeyInput2+0xac>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d10a      	bne.n	800085c <getKeyInput2+0x94>
        	TimeOutForKeyPress2 = 500;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <getKeyInput2+0xac>)
 8000848:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800084c:	601a      	str	r2, [r3, #0]
        	if (KeyReg3_2 == PRESSED_STATE){
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <getKeyInput2+0xa8>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d102      	bne.n	800085c <getKeyInput2+0x94>
        		button2_flag = 1;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <getKeyInput2+0xb0>)
 8000858:	2201      	movs	r2, #1
 800085a:	601a      	str	r2, [r3, #0]
}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000024 	.word	0x20000024
 8000864:	20000020 	.word	0x20000020
 8000868:	20000028 	.word	0x20000028
 800086c:	40010800 	.word	0x40010800
 8000870:	2000002c 	.word	0x2000002c
 8000874:	20000030 	.word	0x20000030
 8000878:	20000094 	.word	0x20000094

0800087c <subKeyProcess3>:
		return 1;
	}
	return 0;
}

void subKeyProcess3(){
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
	//TODO
	//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	button3_flag = 1;
 8000880:	4b03      	ldr	r3, [pc, #12]	; (8000890 <subKeyProcess3+0x14>)
 8000882:	2201      	movs	r2, #1
 8000884:	601a      	str	r2, [r3, #0]
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	20000098 	.word	0x20000098

08000894 <getKeyInput3>:

void getKeyInput3(){
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  KeyReg0_3 = KeyReg1_3;
 8000898:	4b24      	ldr	r3, [pc, #144]	; (800092c <getKeyInput3+0x98>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a24      	ldr	r2, [pc, #144]	; (8000930 <getKeyInput3+0x9c>)
 800089e:	6013      	str	r3, [r2, #0]
  KeyReg1_3 = KeyReg2_3;
 80008a0:	4b24      	ldr	r3, [pc, #144]	; (8000934 <getKeyInput3+0xa0>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a21      	ldr	r2, [pc, #132]	; (800092c <getKeyInput3+0x98>)
 80008a6:	6013      	str	r3, [r2, #0]
  // Add your key
  KeyReg2_3 = HAL_GPIO_ReadPin(BUT3_GPIO_Port, BUT3_Pin);
 80008a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008ac:	4822      	ldr	r0, [pc, #136]	; (8000938 <getKeyInput3+0xa4>)
 80008ae:	f001 fb07 	bl	8001ec0 <HAL_GPIO_ReadPin>
 80008b2:	4603      	mov	r3, r0
 80008b4:	461a      	mov	r2, r3
 80008b6:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <getKeyInput3+0xa0>)
 80008b8:	601a      	str	r2, [r3, #0]

  if ((KeyReg1_3 == KeyReg0_3) && (KeyReg1_3 == KeyReg2_3)){
 80008ba:	4b1c      	ldr	r3, [pc, #112]	; (800092c <getKeyInput3+0x98>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <getKeyInput3+0x9c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d130      	bne.n	8000928 <getKeyInput3+0x94>
 80008c6:	4b19      	ldr	r3, [pc, #100]	; (800092c <getKeyInput3+0x98>)
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <getKeyInput3+0xa0>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	d12a      	bne.n	8000928 <getKeyInput3+0x94>
    if (KeyReg2_3 != KeyReg3_3){
 80008d2:	4b18      	ldr	r3, [pc, #96]	; (8000934 <getKeyInput3+0xa0>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	4b19      	ldr	r3, [pc, #100]	; (800093c <getKeyInput3+0xa8>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	429a      	cmp	r2, r3
 80008dc:	d010      	beq.n	8000900 <getKeyInput3+0x6c>
      KeyReg3_3 = KeyReg2_3;
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <getKeyInput3+0xa0>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a16      	ldr	r2, [pc, #88]	; (800093c <getKeyInput3+0xa8>)
 80008e4:	6013      	str	r3, [r2, #0]

      if (KeyReg3_3 == PRESSED_STATE){
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <getKeyInput3+0xa8>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d11c      	bne.n	8000928 <getKeyInput3+0x94>
          TimeOutForKeyPress3 = 150;
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <getKeyInput3+0xac>)
 80008f0:	2296      	movs	r2, #150	; 0x96
 80008f2:	601a      	str	r2, [r3, #0]
          subKeyProcess3();
 80008f4:	f7ff ffc2 	bl	800087c <subKeyProcess3>
          button3_flag = 1;
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <getKeyInput3+0xb0>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	601a      	str	r2, [r3, #0]
        		button3_flag = 1;
        	}
        }
    }
  }
}
 80008fe:	e013      	b.n	8000928 <getKeyInput3+0x94>
        TimeOutForKeyPress3 --;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <getKeyInput3+0xac>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	3b01      	subs	r3, #1
 8000906:	4a0e      	ldr	r2, [pc, #56]	; (8000940 <getKeyInput3+0xac>)
 8000908:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress3 == 0){
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <getKeyInput3+0xac>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d10a      	bne.n	8000928 <getKeyInput3+0x94>
        	TimeOutForKeyPress3 = 500;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <getKeyInput3+0xac>)
 8000914:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000918:	601a      	str	r2, [r3, #0]
        	if (KeyReg3_3 == PRESSED_STATE){
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <getKeyInput3+0xa8>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d102      	bne.n	8000928 <getKeyInput3+0x94>
        		button3_flag = 1;
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <getKeyInput3+0xb0>)
 8000924:	2201      	movs	r2, #1
 8000926:	601a      	str	r2, [r3, #0]
}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000038 	.word	0x20000038
 8000930:	20000034 	.word	0x20000034
 8000934:	2000003c 	.word	0x2000003c
 8000938:	40010800 	.word	0x40010800
 800093c:	20000040 	.word	0x20000040
 8000940:	20000044 	.word	0x20000044
 8000944:	20000098 	.word	0x20000098

08000948 <display7SEG1>:
 *  Created on: Sep 20, 2024
 *      Author: phong
 */
#include "main.h"
#include "global.h"
void display7SEG1(int x){
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b09      	cmp	r3, #9
 8000954:	f200 8180 	bhi.w	8000c58 <display7SEG1+0x310>
 8000958:	a201      	add	r2, pc, #4	; (adr r2, 8000960 <display7SEG1+0x18>)
 800095a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800095e:	bf00      	nop
 8000960:	08000989 	.word	0x08000989
 8000964:	080009d1 	.word	0x080009d1
 8000968:	08000a19 	.word	0x08000a19
 800096c:	08000a61 	.word	0x08000a61
 8000970:	08000aa9 	.word	0x08000aa9
 8000974:	08000af1 	.word	0x08000af1
 8000978:	08000b39 	.word	0x08000b39
 800097c:	08000b81 	.word	0x08000b81
 8000980:	08000bc9 	.word	0x08000bc9
 8000984:	08000c11 	.word	0x08000c11
	switch (x) {
	        case 0:
	        	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	2101      	movs	r1, #1
 800098c:	48b4      	ldr	r0, [pc, #720]	; (8000c60 <display7SEG1+0x318>)
 800098e:	f001 faae 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	2102      	movs	r1, #2
 8000996:	48b2      	ldr	r0, [pc, #712]	; (8000c60 <display7SEG1+0x318>)
 8000998:	f001 faa9 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	2104      	movs	r1, #4
 80009a0:	48af      	ldr	r0, [pc, #700]	; (8000c60 <display7SEG1+0x318>)
 80009a2:	f001 faa4 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2108      	movs	r1, #8
 80009aa:	48ad      	ldr	r0, [pc, #692]	; (8000c60 <display7SEG1+0x318>)
 80009ac:	f001 fa9f 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2110      	movs	r1, #16
 80009b4:	48aa      	ldr	r0, [pc, #680]	; (8000c60 <display7SEG1+0x318>)
 80009b6:	f001 fa9a 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2120      	movs	r1, #32
 80009be:	48a8      	ldr	r0, [pc, #672]	; (8000c60 <display7SEG1+0x318>)
 80009c0:	f001 fa95 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, GPIO_PIN_SET);
 80009c4:	2201      	movs	r2, #1
 80009c6:	2140      	movs	r1, #64	; 0x40
 80009c8:	48a5      	ldr	r0, [pc, #660]	; (8000c60 <display7SEG1+0x318>)
 80009ca:	f001 fa90 	bl	8001eee <HAL_GPIO_WritePin>
	            break;
 80009ce:	e143      	b.n	8000c58 <display7SEG1+0x310>
	        case 1:
	        	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 80009d0:	2201      	movs	r2, #1
 80009d2:	2101      	movs	r1, #1
 80009d4:	48a2      	ldr	r0, [pc, #648]	; (8000c60 <display7SEG1+0x318>)
 80009d6:	f001 fa8a 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2102      	movs	r1, #2
 80009de:	48a0      	ldr	r0, [pc, #640]	; (8000c60 <display7SEG1+0x318>)
 80009e0:	f001 fa85 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2104      	movs	r1, #4
 80009e8:	489d      	ldr	r0, [pc, #628]	; (8000c60 <display7SEG1+0x318>)
 80009ea:	f001 fa80 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 80009ee:	2201      	movs	r2, #1
 80009f0:	2108      	movs	r1, #8
 80009f2:	489b      	ldr	r0, [pc, #620]	; (8000c60 <display7SEG1+0x318>)
 80009f4:	f001 fa7b 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 80009f8:	2201      	movs	r2, #1
 80009fa:	2110      	movs	r1, #16
 80009fc:	4898      	ldr	r0, [pc, #608]	; (8000c60 <display7SEG1+0x318>)
 80009fe:	f001 fa76 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 8000a02:	2201      	movs	r2, #1
 8000a04:	2120      	movs	r1, #32
 8000a06:	4896      	ldr	r0, [pc, #600]	; (8000c60 <display7SEG1+0x318>)
 8000a08:	f001 fa71 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, GPIO_PIN_SET);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2140      	movs	r1, #64	; 0x40
 8000a10:	4893      	ldr	r0, [pc, #588]	; (8000c60 <display7SEG1+0x318>)
 8000a12:	f001 fa6c 	bl	8001eee <HAL_GPIO_WritePin>
	        	break;
 8000a16:	e11f      	b.n	8000c58 <display7SEG1+0x310>
	        case 2:
	        	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	4890      	ldr	r0, [pc, #576]	; (8000c60 <display7SEG1+0x318>)
 8000a1e:	f001 fa66 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2102      	movs	r1, #2
 8000a26:	488e      	ldr	r0, [pc, #568]	; (8000c60 <display7SEG1+0x318>)
 8000a28:	f001 fa61 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	2104      	movs	r1, #4
 8000a30:	488b      	ldr	r0, [pc, #556]	; (8000c60 <display7SEG1+0x318>)
 8000a32:	f001 fa5c 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2108      	movs	r1, #8
 8000a3a:	4889      	ldr	r0, [pc, #548]	; (8000c60 <display7SEG1+0x318>)
 8000a3c:	f001 fa57 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2110      	movs	r1, #16
 8000a44:	4886      	ldr	r0, [pc, #536]	; (8000c60 <display7SEG1+0x318>)
 8000a46:	f001 fa52 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2120      	movs	r1, #32
 8000a4e:	4884      	ldr	r0, [pc, #528]	; (8000c60 <display7SEG1+0x318>)
 8000a50:	f001 fa4d 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2140      	movs	r1, #64	; 0x40
 8000a58:	4881      	ldr	r0, [pc, #516]	; (8000c60 <display7SEG1+0x318>)
 8000a5a:	f001 fa48 	bl	8001eee <HAL_GPIO_WritePin>
	        	break;
 8000a5e:	e0fb      	b.n	8000c58 <display7SEG1+0x310>
	        case 3:
	        	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2101      	movs	r1, #1
 8000a64:	487e      	ldr	r0, [pc, #504]	; (8000c60 <display7SEG1+0x318>)
 8000a66:	f001 fa42 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2102      	movs	r1, #2
 8000a6e:	487c      	ldr	r0, [pc, #496]	; (8000c60 <display7SEG1+0x318>)
 8000a70:	f001 fa3d 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2104      	movs	r1, #4
 8000a78:	4879      	ldr	r0, [pc, #484]	; (8000c60 <display7SEG1+0x318>)
 8000a7a:	f001 fa38 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2108      	movs	r1, #8
 8000a82:	4877      	ldr	r0, [pc, #476]	; (8000c60 <display7SEG1+0x318>)
 8000a84:	f001 fa33 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2110      	movs	r1, #16
 8000a8c:	4874      	ldr	r0, [pc, #464]	; (8000c60 <display7SEG1+0x318>)
 8000a8e:	f001 fa2e 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	2120      	movs	r1, #32
 8000a96:	4872      	ldr	r0, [pc, #456]	; (8000c60 <display7SEG1+0x318>)
 8000a98:	f001 fa29 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2140      	movs	r1, #64	; 0x40
 8000aa0:	486f      	ldr	r0, [pc, #444]	; (8000c60 <display7SEG1+0x318>)
 8000aa2:	f001 fa24 	bl	8001eee <HAL_GPIO_WritePin>
	        	break;
 8000aa6:	e0d7      	b.n	8000c58 <display7SEG1+0x310>
	        case 4:
	        	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2101      	movs	r1, #1
 8000aac:	486c      	ldr	r0, [pc, #432]	; (8000c60 <display7SEG1+0x318>)
 8000aae:	f001 fa1e 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2102      	movs	r1, #2
 8000ab6:	486a      	ldr	r0, [pc, #424]	; (8000c60 <display7SEG1+0x318>)
 8000ab8:	f001 fa19 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2104      	movs	r1, #4
 8000ac0:	4867      	ldr	r0, [pc, #412]	; (8000c60 <display7SEG1+0x318>)
 8000ac2:	f001 fa14 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	2108      	movs	r1, #8
 8000aca:	4865      	ldr	r0, [pc, #404]	; (8000c60 <display7SEG1+0x318>)
 8000acc:	f001 fa0f 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	2110      	movs	r1, #16
 8000ad4:	4862      	ldr	r0, [pc, #392]	; (8000c60 <display7SEG1+0x318>)
 8000ad6:	f001 fa0a 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2120      	movs	r1, #32
 8000ade:	4860      	ldr	r0, [pc, #384]	; (8000c60 <display7SEG1+0x318>)
 8000ae0:	f001 fa05 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2140      	movs	r1, #64	; 0x40
 8000ae8:	485d      	ldr	r0, [pc, #372]	; (8000c60 <display7SEG1+0x318>)
 8000aea:	f001 fa00 	bl	8001eee <HAL_GPIO_WritePin>
	        	break;
 8000aee:	e0b3      	b.n	8000c58 <display7SEG1+0x310>
	        case 5:
	        	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2101      	movs	r1, #1
 8000af4:	485a      	ldr	r0, [pc, #360]	; (8000c60 <display7SEG1+0x318>)
 8000af6:	f001 f9fa 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_SET);
 8000afa:	2201      	movs	r2, #1
 8000afc:	2102      	movs	r1, #2
 8000afe:	4858      	ldr	r0, [pc, #352]	; (8000c60 <display7SEG1+0x318>)
 8000b00:	f001 f9f5 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2104      	movs	r1, #4
 8000b08:	4855      	ldr	r0, [pc, #340]	; (8000c60 <display7SEG1+0x318>)
 8000b0a:	f001 f9f0 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2108      	movs	r1, #8
 8000b12:	4853      	ldr	r0, [pc, #332]	; (8000c60 <display7SEG1+0x318>)
 8000b14:	f001 f9eb 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	2110      	movs	r1, #16
 8000b1c:	4850      	ldr	r0, [pc, #320]	; (8000c60 <display7SEG1+0x318>)
 8000b1e:	f001 f9e6 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2120      	movs	r1, #32
 8000b26:	484e      	ldr	r0, [pc, #312]	; (8000c60 <display7SEG1+0x318>)
 8000b28:	f001 f9e1 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2140      	movs	r1, #64	; 0x40
 8000b30:	484b      	ldr	r0, [pc, #300]	; (8000c60 <display7SEG1+0x318>)
 8000b32:	f001 f9dc 	bl	8001eee <HAL_GPIO_WritePin>
	        	break;
 8000b36:	e08f      	b.n	8000c58 <display7SEG1+0x310>
	        case 6:
	        	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	4848      	ldr	r0, [pc, #288]	; (8000c60 <display7SEG1+0x318>)
 8000b3e:	f001 f9d6 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_SET);
 8000b42:	2201      	movs	r2, #1
 8000b44:	2102      	movs	r1, #2
 8000b46:	4846      	ldr	r0, [pc, #280]	; (8000c60 <display7SEG1+0x318>)
 8000b48:	f001 f9d1 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2104      	movs	r1, #4
 8000b50:	4843      	ldr	r0, [pc, #268]	; (8000c60 <display7SEG1+0x318>)
 8000b52:	f001 f9cc 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2108      	movs	r1, #8
 8000b5a:	4841      	ldr	r0, [pc, #260]	; (8000c60 <display7SEG1+0x318>)
 8000b5c:	f001 f9c7 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2110      	movs	r1, #16
 8000b64:	483e      	ldr	r0, [pc, #248]	; (8000c60 <display7SEG1+0x318>)
 8000b66:	f001 f9c2 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2120      	movs	r1, #32
 8000b6e:	483c      	ldr	r0, [pc, #240]	; (8000c60 <display7SEG1+0x318>)
 8000b70:	f001 f9bd 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2140      	movs	r1, #64	; 0x40
 8000b78:	4839      	ldr	r0, [pc, #228]	; (8000c60 <display7SEG1+0x318>)
 8000b7a:	f001 f9b8 	bl	8001eee <HAL_GPIO_WritePin>
	        	break;
 8000b7e:	e06b      	b.n	8000c58 <display7SEG1+0x310>
	        case 7:
	        	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2101      	movs	r1, #1
 8000b84:	4836      	ldr	r0, [pc, #216]	; (8000c60 <display7SEG1+0x318>)
 8000b86:	f001 f9b2 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	4834      	ldr	r0, [pc, #208]	; (8000c60 <display7SEG1+0x318>)
 8000b90:	f001 f9ad 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2104      	movs	r1, #4
 8000b98:	4831      	ldr	r0, [pc, #196]	; (8000c60 <display7SEG1+0x318>)
 8000b9a:	f001 f9a8 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	2108      	movs	r1, #8
 8000ba2:	482f      	ldr	r0, [pc, #188]	; (8000c60 <display7SEG1+0x318>)
 8000ba4:	f001 f9a3 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	2110      	movs	r1, #16
 8000bac:	482c      	ldr	r0, [pc, #176]	; (8000c60 <display7SEG1+0x318>)
 8000bae:	f001 f99e 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	2120      	movs	r1, #32
 8000bb6:	482a      	ldr	r0, [pc, #168]	; (8000c60 <display7SEG1+0x318>)
 8000bb8:	f001 f999 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, GPIO_PIN_SET);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	2140      	movs	r1, #64	; 0x40
 8000bc0:	4827      	ldr	r0, [pc, #156]	; (8000c60 <display7SEG1+0x318>)
 8000bc2:	f001 f994 	bl	8001eee <HAL_GPIO_WritePin>
	        	break;
 8000bc6:	e047      	b.n	8000c58 <display7SEG1+0x310>
	        case 8:
	        	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2101      	movs	r1, #1
 8000bcc:	4824      	ldr	r0, [pc, #144]	; (8000c60 <display7SEG1+0x318>)
 8000bce:	f001 f98e 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	4822      	ldr	r0, [pc, #136]	; (8000c60 <display7SEG1+0x318>)
 8000bd8:	f001 f989 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2104      	movs	r1, #4
 8000be0:	481f      	ldr	r0, [pc, #124]	; (8000c60 <display7SEG1+0x318>)
 8000be2:	f001 f984 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2108      	movs	r1, #8
 8000bea:	481d      	ldr	r0, [pc, #116]	; (8000c60 <display7SEG1+0x318>)
 8000bec:	f001 f97f 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2110      	movs	r1, #16
 8000bf4:	481a      	ldr	r0, [pc, #104]	; (8000c60 <display7SEG1+0x318>)
 8000bf6:	f001 f97a 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2120      	movs	r1, #32
 8000bfe:	4818      	ldr	r0, [pc, #96]	; (8000c60 <display7SEG1+0x318>)
 8000c00:	f001 f975 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, GPIO_PIN_RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2140      	movs	r1, #64	; 0x40
 8000c08:	4815      	ldr	r0, [pc, #84]	; (8000c60 <display7SEG1+0x318>)
 8000c0a:	f001 f970 	bl	8001eee <HAL_GPIO_WritePin>
	        	break;
 8000c0e:	e023      	b.n	8000c58 <display7SEG1+0x310>
	        case 9:
	        	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2101      	movs	r1, #1
 8000c14:	4812      	ldr	r0, [pc, #72]	; (8000c60 <display7SEG1+0x318>)
 8000c16:	f001 f96a 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2102      	movs	r1, #2
 8000c1e:	4810      	ldr	r0, [pc, #64]	; (8000c60 <display7SEG1+0x318>)
 8000c20:	f001 f965 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2104      	movs	r1, #4
 8000c28:	480d      	ldr	r0, [pc, #52]	; (8000c60 <display7SEG1+0x318>)
 8000c2a:	f001 f960 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2108      	movs	r1, #8
 8000c32:	480b      	ldr	r0, [pc, #44]	; (8000c60 <display7SEG1+0x318>)
 8000c34:	f001 f95b 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	2110      	movs	r1, #16
 8000c3c:	4808      	ldr	r0, [pc, #32]	; (8000c60 <display7SEG1+0x318>)
 8000c3e:	f001 f956 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2120      	movs	r1, #32
 8000c46:	4806      	ldr	r0, [pc, #24]	; (8000c60 <display7SEG1+0x318>)
 8000c48:	f001 f951 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2140      	movs	r1, #64	; 0x40
 8000c50:	4803      	ldr	r0, [pc, #12]	; (8000c60 <display7SEG1+0x318>)
 8000c52:	f001 f94c 	bl	8001eee <HAL_GPIO_WritePin>
	        	break;
 8000c56:	bf00      	nop
}
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40010c00 	.word	0x40010c00

08000c64 <display7SEG2>:
void display7SEG2(int x){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2b09      	cmp	r3, #9
 8000c70:	f200 81bc 	bhi.w	8000fec <display7SEG2+0x388>
 8000c74:	a201      	add	r2, pc, #4	; (adr r2, 8000c7c <display7SEG2+0x18>)
 8000c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c7a:	bf00      	nop
 8000c7c:	08000ca5 	.word	0x08000ca5
 8000c80:	08000cf9 	.word	0x08000cf9
 8000c84:	08000d4d 	.word	0x08000d4d
 8000c88:	08000da1 	.word	0x08000da1
 8000c8c:	08000df5 	.word	0x08000df5
 8000c90:	08000e49 	.word	0x08000e49
 8000c94:	08000e9d 	.word	0x08000e9d
 8000c98:	08000ef1 	.word	0x08000ef1
 8000c9c:	08000f45 	.word	0x08000f45
 8000ca0:	08000f99 	.word	0x08000f99
	switch (x) {
	        case 0:
	        	HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	48d2      	ldr	r0, [pc, #840]	; (8000ff4 <display7SEG2+0x390>)
 8000caa:	f001 f920 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cb4:	48cf      	ldr	r0, [pc, #828]	; (8000ff4 <display7SEG2+0x390>)
 8000cb6:	f001 f91a 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cc0:	48cc      	ldr	r0, [pc, #816]	; (8000ff4 <display7SEG2+0x390>)
 8000cc2:	f001 f914 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ccc:	48c9      	ldr	r0, [pc, #804]	; (8000ff4 <display7SEG2+0x390>)
 8000cce:	f001 f90e 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cd8:	48c6      	ldr	r0, [pc, #792]	; (8000ff4 <display7SEG2+0x390>)
 8000cda:	f001 f908 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, GPIO_PIN_RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ce4:	48c3      	ldr	r0, [pc, #780]	; (8000ff4 <display7SEG2+0x390>)
 8000ce6:	f001 f902 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG14_GPIO_Port, SEG14_Pin, GPIO_PIN_SET);
 8000cea:	2201      	movs	r2, #1
 8000cec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cf0:	48c0      	ldr	r0, [pc, #768]	; (8000ff4 <display7SEG2+0x390>)
 8000cf2:	f001 f8fc 	bl	8001eee <HAL_GPIO_WritePin>
	            break;
 8000cf6:	e179      	b.n	8000fec <display7SEG2+0x388>
	        case 1:
	        	HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, GPIO_PIN_SET);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	2180      	movs	r1, #128	; 0x80
 8000cfc:	48bd      	ldr	r0, [pc, #756]	; (8000ff4 <display7SEG2+0x390>)
 8000cfe:	f001 f8f6 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d08:	48ba      	ldr	r0, [pc, #744]	; (8000ff4 <display7SEG2+0x390>)
 8000d0a:	f001 f8f0 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d14:	48b7      	ldr	r0, [pc, #732]	; (8000ff4 <display7SEG2+0x390>)
 8000d16:	f001 f8ea 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, GPIO_PIN_SET);
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d20:	48b4      	ldr	r0, [pc, #720]	; (8000ff4 <display7SEG2+0x390>)
 8000d22:	f001 f8e4 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, GPIO_PIN_SET);
 8000d26:	2201      	movs	r2, #1
 8000d28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d2c:	48b1      	ldr	r0, [pc, #708]	; (8000ff4 <display7SEG2+0x390>)
 8000d2e:	f001 f8de 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, GPIO_PIN_SET);
 8000d32:	2201      	movs	r2, #1
 8000d34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d38:	48ae      	ldr	r0, [pc, #696]	; (8000ff4 <display7SEG2+0x390>)
 8000d3a:	f001 f8d8 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG14_GPIO_Port, SEG14_Pin, GPIO_PIN_SET);
 8000d3e:	2201      	movs	r2, #1
 8000d40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d44:	48ab      	ldr	r0, [pc, #684]	; (8000ff4 <display7SEG2+0x390>)
 8000d46:	f001 f8d2 	bl	8001eee <HAL_GPIO_WritePin>
	        	break;
 8000d4a:	e14f      	b.n	8000fec <display7SEG2+0x388>
	        case 2:
	        	HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2180      	movs	r1, #128	; 0x80
 8000d50:	48a8      	ldr	r0, [pc, #672]	; (8000ff4 <display7SEG2+0x390>)
 8000d52:	f001 f8cc 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d5c:	48a5      	ldr	r0, [pc, #660]	; (8000ff4 <display7SEG2+0x390>)
 8000d5e:	f001 f8c6 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, GPIO_PIN_SET);
 8000d62:	2201      	movs	r2, #1
 8000d64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d68:	48a2      	ldr	r0, [pc, #648]	; (8000ff4 <display7SEG2+0x390>)
 8000d6a:	f001 f8c0 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d74:	489f      	ldr	r0, [pc, #636]	; (8000ff4 <display7SEG2+0x390>)
 8000d76:	f001 f8ba 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d80:	489c      	ldr	r0, [pc, #624]	; (8000ff4 <display7SEG2+0x390>)
 8000d82:	f001 f8b4 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, GPIO_PIN_SET);
 8000d86:	2201      	movs	r2, #1
 8000d88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d8c:	4899      	ldr	r0, [pc, #612]	; (8000ff4 <display7SEG2+0x390>)
 8000d8e:	f001 f8ae 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG14_GPIO_Port, SEG14_Pin, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d98:	4896      	ldr	r0, [pc, #600]	; (8000ff4 <display7SEG2+0x390>)
 8000d9a:	f001 f8a8 	bl	8001eee <HAL_GPIO_WritePin>
	        	break;
 8000d9e:	e125      	b.n	8000fec <display7SEG2+0x388>
	        case 3:
	        	HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, GPIO_PIN_RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	2180      	movs	r1, #128	; 0x80
 8000da4:	4893      	ldr	r0, [pc, #588]	; (8000ff4 <display7SEG2+0x390>)
 8000da6:	f001 f8a2 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000db0:	4890      	ldr	r0, [pc, #576]	; (8000ff4 <display7SEG2+0x390>)
 8000db2:	f001 f89c 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, GPIO_PIN_RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dbc:	488d      	ldr	r0, [pc, #564]	; (8000ff4 <display7SEG2+0x390>)
 8000dbe:	f001 f896 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dc8:	488a      	ldr	r0, [pc, #552]	; (8000ff4 <display7SEG2+0x390>)
 8000dca:	f001 f890 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, GPIO_PIN_SET);
 8000dce:	2201      	movs	r2, #1
 8000dd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dd4:	4887      	ldr	r0, [pc, #540]	; (8000ff4 <display7SEG2+0x390>)
 8000dd6:	f001 f88a 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, GPIO_PIN_SET);
 8000dda:	2201      	movs	r2, #1
 8000ddc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000de0:	4884      	ldr	r0, [pc, #528]	; (8000ff4 <display7SEG2+0x390>)
 8000de2:	f001 f884 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG14_GPIO_Port, SEG14_Pin, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dec:	4881      	ldr	r0, [pc, #516]	; (8000ff4 <display7SEG2+0x390>)
 8000dee:	f001 f87e 	bl	8001eee <HAL_GPIO_WritePin>
	        	break;
 8000df2:	e0fb      	b.n	8000fec <display7SEG2+0x388>
	        case 4:
	        	HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, GPIO_PIN_SET);
 8000df4:	2201      	movs	r2, #1
 8000df6:	2180      	movs	r1, #128	; 0x80
 8000df8:	487e      	ldr	r0, [pc, #504]	; (8000ff4 <display7SEG2+0x390>)
 8000dfa:	f001 f878 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, GPIO_PIN_RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e04:	487b      	ldr	r0, [pc, #492]	; (8000ff4 <display7SEG2+0x390>)
 8000e06:	f001 f872 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e10:	4878      	ldr	r0, [pc, #480]	; (8000ff4 <display7SEG2+0x390>)
 8000e12:	f001 f86c 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, GPIO_PIN_SET);
 8000e16:	2201      	movs	r2, #1
 8000e18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e1c:	4875      	ldr	r0, [pc, #468]	; (8000ff4 <display7SEG2+0x390>)
 8000e1e:	f001 f866 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, GPIO_PIN_SET);
 8000e22:	2201      	movs	r2, #1
 8000e24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e28:	4872      	ldr	r0, [pc, #456]	; (8000ff4 <display7SEG2+0x390>)
 8000e2a:	f001 f860 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e34:	486f      	ldr	r0, [pc, #444]	; (8000ff4 <display7SEG2+0x390>)
 8000e36:	f001 f85a 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG14_GPIO_Port, SEG14_Pin, GPIO_PIN_RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e40:	486c      	ldr	r0, [pc, #432]	; (8000ff4 <display7SEG2+0x390>)
 8000e42:	f001 f854 	bl	8001eee <HAL_GPIO_WritePin>
	        	break;
 8000e46:	e0d1      	b.n	8000fec <display7SEG2+0x388>
	        case 5:
	        	HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2180      	movs	r1, #128	; 0x80
 8000e4c:	4869      	ldr	r0, [pc, #420]	; (8000ff4 <display7SEG2+0x390>)
 8000e4e:	f001 f84e 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, GPIO_PIN_SET);
 8000e52:	2201      	movs	r2, #1
 8000e54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e58:	4866      	ldr	r0, [pc, #408]	; (8000ff4 <display7SEG2+0x390>)
 8000e5a:	f001 f848 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, GPIO_PIN_RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e64:	4863      	ldr	r0, [pc, #396]	; (8000ff4 <display7SEG2+0x390>)
 8000e66:	f001 f842 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, GPIO_PIN_RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e70:	4860      	ldr	r0, [pc, #384]	; (8000ff4 <display7SEG2+0x390>)
 8000e72:	f001 f83c 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, GPIO_PIN_SET);
 8000e76:	2201      	movs	r2, #1
 8000e78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e7c:	485d      	ldr	r0, [pc, #372]	; (8000ff4 <display7SEG2+0x390>)
 8000e7e:	f001 f836 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e88:	485a      	ldr	r0, [pc, #360]	; (8000ff4 <display7SEG2+0x390>)
 8000e8a:	f001 f830 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG14_GPIO_Port, SEG14_Pin, GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e94:	4857      	ldr	r0, [pc, #348]	; (8000ff4 <display7SEG2+0x390>)
 8000e96:	f001 f82a 	bl	8001eee <HAL_GPIO_WritePin>
	        	break;
 8000e9a:	e0a7      	b.n	8000fec <display7SEG2+0x388>
	        case 6:
	        	HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, GPIO_PIN_RESET);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2180      	movs	r1, #128	; 0x80
 8000ea0:	4854      	ldr	r0, [pc, #336]	; (8000ff4 <display7SEG2+0x390>)
 8000ea2:	f001 f824 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, GPIO_PIN_SET);
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eac:	4851      	ldr	r0, [pc, #324]	; (8000ff4 <display7SEG2+0x390>)
 8000eae:	f001 f81e 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, GPIO_PIN_RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eb8:	484e      	ldr	r0, [pc, #312]	; (8000ff4 <display7SEG2+0x390>)
 8000eba:	f001 f818 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, GPIO_PIN_RESET);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ec4:	484b      	ldr	r0, [pc, #300]	; (8000ff4 <display7SEG2+0x390>)
 8000ec6:	f001 f812 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, GPIO_PIN_RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ed0:	4848      	ldr	r0, [pc, #288]	; (8000ff4 <display7SEG2+0x390>)
 8000ed2:	f001 f80c 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000edc:	4845      	ldr	r0, [pc, #276]	; (8000ff4 <display7SEG2+0x390>)
 8000ede:	f001 f806 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG14_GPIO_Port, SEG14_Pin, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ee8:	4842      	ldr	r0, [pc, #264]	; (8000ff4 <display7SEG2+0x390>)
 8000eea:	f001 f800 	bl	8001eee <HAL_GPIO_WritePin>
	        	break;
 8000eee:	e07d      	b.n	8000fec <display7SEG2+0x388>
	        case 7:
	        	HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, GPIO_PIN_RESET);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2180      	movs	r1, #128	; 0x80
 8000ef4:	483f      	ldr	r0, [pc, #252]	; (8000ff4 <display7SEG2+0x390>)
 8000ef6:	f000 fffa 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, GPIO_PIN_RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f00:	483c      	ldr	r0, [pc, #240]	; (8000ff4 <display7SEG2+0x390>)
 8000f02:	f000 fff4 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, GPIO_PIN_RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f0c:	4839      	ldr	r0, [pc, #228]	; (8000ff4 <display7SEG2+0x390>)
 8000f0e:	f000 ffee 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, GPIO_PIN_SET);
 8000f12:	2201      	movs	r2, #1
 8000f14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f18:	4836      	ldr	r0, [pc, #216]	; (8000ff4 <display7SEG2+0x390>)
 8000f1a:	f000 ffe8 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, GPIO_PIN_SET);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f24:	4833      	ldr	r0, [pc, #204]	; (8000ff4 <display7SEG2+0x390>)
 8000f26:	f000 ffe2 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, GPIO_PIN_SET);
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f30:	4830      	ldr	r0, [pc, #192]	; (8000ff4 <display7SEG2+0x390>)
 8000f32:	f000 ffdc 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG14_GPIO_Port, SEG14_Pin, GPIO_PIN_SET);
 8000f36:	2201      	movs	r2, #1
 8000f38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f3c:	482d      	ldr	r0, [pc, #180]	; (8000ff4 <display7SEG2+0x390>)
 8000f3e:	f000 ffd6 	bl	8001eee <HAL_GPIO_WritePin>
	        	break;
 8000f42:	e053      	b.n	8000fec <display7SEG2+0x388>
	        case 8:
	        	HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, GPIO_PIN_RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2180      	movs	r1, #128	; 0x80
 8000f48:	482a      	ldr	r0, [pc, #168]	; (8000ff4 <display7SEG2+0x390>)
 8000f4a:	f000 ffd0 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f54:	4827      	ldr	r0, [pc, #156]	; (8000ff4 <display7SEG2+0x390>)
 8000f56:	f000 ffca 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f60:	4824      	ldr	r0, [pc, #144]	; (8000ff4 <display7SEG2+0x390>)
 8000f62:	f000 ffc4 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f6c:	4821      	ldr	r0, [pc, #132]	; (8000ff4 <display7SEG2+0x390>)
 8000f6e:	f000 ffbe 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, GPIO_PIN_RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f78:	481e      	ldr	r0, [pc, #120]	; (8000ff4 <display7SEG2+0x390>)
 8000f7a:	f000 ffb8 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f84:	481b      	ldr	r0, [pc, #108]	; (8000ff4 <display7SEG2+0x390>)
 8000f86:	f000 ffb2 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG14_GPIO_Port, SEG14_Pin, GPIO_PIN_RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f90:	4818      	ldr	r0, [pc, #96]	; (8000ff4 <display7SEG2+0x390>)
 8000f92:	f000 ffac 	bl	8001eee <HAL_GPIO_WritePin>
	        	break;
 8000f96:	e029      	b.n	8000fec <display7SEG2+0x388>
	        case 9:
	        	HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2180      	movs	r1, #128	; 0x80
 8000f9c:	4815      	ldr	r0, [pc, #84]	; (8000ff4 <display7SEG2+0x390>)
 8000f9e:	f000 ffa6 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fa8:	4812      	ldr	r0, [pc, #72]	; (8000ff4 <display7SEG2+0x390>)
 8000faa:	f000 ffa0 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb4:	480f      	ldr	r0, [pc, #60]	; (8000ff4 <display7SEG2+0x390>)
 8000fb6:	f000 ff9a 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fc0:	480c      	ldr	r0, [pc, #48]	; (8000ff4 <display7SEG2+0x390>)
 8000fc2:	f000 ff94 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, GPIO_PIN_SET);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fcc:	4809      	ldr	r0, [pc, #36]	; (8000ff4 <display7SEG2+0x390>)
 8000fce:	f000 ff8e 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, GPIO_PIN_RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fd8:	4806      	ldr	r0, [pc, #24]	; (8000ff4 <display7SEG2+0x390>)
 8000fda:	f000 ff88 	bl	8001eee <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(SEG14_GPIO_Port, SEG14_Pin, GPIO_PIN_RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fe4:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <display7SEG2+0x390>)
 8000fe6:	f000 ff82 	bl	8001eee <HAL_GPIO_WritePin>
	        	break;
 8000fea:	bf00      	nop
}
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40010c00 	.word	0x40010c00

08000ff8 <fsm_manual_run>:

#include "fsm_manual_run.h"
#include "global.h"
int index2;
 void fsm_manual_run()
 {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	 switch (status)
 8000ffc:	4ba2      	ldr	r3, [pc, #648]	; (8001288 <fsm_manual_run+0x290>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b0d      	cmp	r3, #13
 8001002:	f000 80d3 	beq.w	80011ac <fsm_manual_run+0x1b4>
 8001006:	2b0d      	cmp	r3, #13
 8001008:	f300 8135 	bgt.w	8001276 <fsm_manual_run+0x27e>
 800100c:	2b0b      	cmp	r3, #11
 800100e:	d002      	beq.n	8001016 <fsm_manual_run+0x1e>
 8001010:	2b0c      	cmp	r3, #12
 8001012:	d066      	beq.n	80010e2 <fsm_manual_run+0xea>
			 setTimer(10000);
			 setTimer2(250);
		 }
		 break;
	 default:
		 break;
 8001014:	e12f      	b.n	8001276 <fsm_manual_run+0x27e>
		 updateled(1, red_sec);
 8001016:	4b9d      	ldr	r3, [pc, #628]	; (800128c <fsm_manual_run+0x294>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4619      	mov	r1, r3
 800101c:	2001      	movs	r0, #1
 800101e:	f000 f973 	bl	8001308 <updateled>
		 if(timer_flag2==1)
 8001022:	4b9b      	ldr	r3, [pc, #620]	; (8001290 <fsm_manual_run+0x298>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d111      	bne.n	800104e <fsm_manual_run+0x56>
			 update7SEG(index2++);
 800102a:	4b9a      	ldr	r3, [pc, #616]	; (8001294 <fsm_manual_run+0x29c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	1c5a      	adds	r2, r3, #1
 8001030:	4998      	ldr	r1, [pc, #608]	; (8001294 <fsm_manual_run+0x29c>)
 8001032:	600a      	str	r2, [r1, #0]
 8001034:	4618      	mov	r0, r3
 8001036:	f000 f939 	bl	80012ac <update7SEG>
			 if(index2>1)index2=0;
 800103a:	4b96      	ldr	r3, [pc, #600]	; (8001294 <fsm_manual_run+0x29c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b01      	cmp	r3, #1
 8001040:	dd02      	ble.n	8001048 <fsm_manual_run+0x50>
 8001042:	4b94      	ldr	r3, [pc, #592]	; (8001294 <fsm_manual_run+0x29c>)
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
			 setTimer2(250);
 8001048:	20fa      	movs	r0, #250	; 0xfa
 800104a:	f000 fb67 	bl	800171c <setTimer2>
		 if(timer_flag1==1)
 800104e:	4b92      	ldr	r3, [pc, #584]	; (8001298 <fsm_manual_run+0x2a0>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d10b      	bne.n	800106e <fsm_manual_run+0x76>
			HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 8001056:	2104      	movs	r1, #4
 8001058:	4890      	ldr	r0, [pc, #576]	; (800129c <fsm_manual_run+0x2a4>)
 800105a:	f000 ff60 	bl	8001f1e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(RED2_GPIO_Port, RED2_Pin);
 800105e:	2120      	movs	r1, #32
 8001060:	488e      	ldr	r0, [pc, #568]	; (800129c <fsm_manual_run+0x2a4>)
 8001062:	f000 ff5c 	bl	8001f1e <HAL_GPIO_TogglePin>
			setTimer1(500);
 8001066:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800106a:	f000 fb23 	bl	80016b4 <setTimer1>
		 if(timer_flag==1)
 800106e:	4b8c      	ldr	r3, [pc, #560]	; (80012a0 <fsm_manual_run+0x2a8>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d106      	bne.n	8001084 <fsm_manual_run+0x8c>
			 status=RED_GRE;
 8001076:	4b84      	ldr	r3, [pc, #528]	; (8001288 <fsm_manual_run+0x290>)
 8001078:	2202      	movs	r2, #2
 800107a:	601a      	str	r2, [r3, #0]
			 setTimer(5000);
 800107c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001080:	f000 fae4 	bl	800164c <setTimer>
		 if(isButton1Pressed()==1)
 8001084:	f7ff fb0a 	bl	800069c <isButton1Pressed>
 8001088:	4603      	mov	r3, r0
 800108a:	2b01      	cmp	r3, #1
 800108c:	d10f      	bne.n	80010ae <fsm_manual_run+0xb6>
			 all_led_off();
 800108e:	f7ff f85d 	bl	800014c <all_led_off>
			 status=SET_YEL;
 8001092:	4b7d      	ldr	r3, [pc, #500]	; (8001288 <fsm_manual_run+0x290>)
 8001094:	220c      	movs	r2, #12
 8001096:	601a      	str	r2, [r3, #0]
			 setTimer(10000);
 8001098:	f242 7010 	movw	r0, #10000	; 0x2710
 800109c:	f000 fad6 	bl	800164c <setTimer>
			 setTimer1(500);
 80010a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010a4:	f000 fb06 	bl	80016b4 <setTimer1>
			 setTimer2(250);
 80010a8:	20fa      	movs	r0, #250	; 0xfa
 80010aa:	f000 fb37 	bl	800171c <setTimer2>
		 if(isButton2Pressed())
 80010ae:	f7ff fb6d 	bl	800078c <isButton2Pressed>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f000 80e0 	beq.w	800127a <fsm_manual_run+0x282>
			 red_sec++;
 80010ba:	4b74      	ldr	r3, [pc, #464]	; (800128c <fsm_manual_run+0x294>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	3301      	adds	r3, #1
 80010c0:	4a72      	ldr	r2, [pc, #456]	; (800128c <fsm_manual_run+0x294>)
 80010c2:	6013      	str	r3, [r2, #0]
			 if(red_sec>99) red_sec=1;
 80010c4:	4b71      	ldr	r3, [pc, #452]	; (800128c <fsm_manual_run+0x294>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b63      	cmp	r3, #99	; 0x63
 80010ca:	dd02      	ble.n	80010d2 <fsm_manual_run+0xda>
 80010cc:	4b6f      	ldr	r3, [pc, #444]	; (800128c <fsm_manual_run+0x294>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	601a      	str	r2, [r3, #0]
			 setTimer(10000);
 80010d2:	f242 7010 	movw	r0, #10000	; 0x2710
 80010d6:	f000 fab9 	bl	800164c <setTimer>
			 setTimer2(250);
 80010da:	20fa      	movs	r0, #250	; 0xfa
 80010dc:	f000 fb1e 	bl	800171c <setTimer2>
		 break;
 80010e0:	e0cb      	b.n	800127a <fsm_manual_run+0x282>
		 updateled(2, yel_sec);
 80010e2:	4b70      	ldr	r3, [pc, #448]	; (80012a4 <fsm_manual_run+0x2ac>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4619      	mov	r1, r3
 80010e8:	2002      	movs	r0, #2
 80010ea:	f000 f90d 	bl	8001308 <updateled>
		 if(timer_flag2==1)
 80010ee:	4b68      	ldr	r3, [pc, #416]	; (8001290 <fsm_manual_run+0x298>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d111      	bne.n	800111a <fsm_manual_run+0x122>
			 update7SEG(index2++);
 80010f6:	4b67      	ldr	r3, [pc, #412]	; (8001294 <fsm_manual_run+0x29c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	1c5a      	adds	r2, r3, #1
 80010fc:	4965      	ldr	r1, [pc, #404]	; (8001294 <fsm_manual_run+0x29c>)
 80010fe:	600a      	str	r2, [r1, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f000 f8d3 	bl	80012ac <update7SEG>
			 if(index2>1)index2=0;
 8001106:	4b63      	ldr	r3, [pc, #396]	; (8001294 <fsm_manual_run+0x29c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2b01      	cmp	r3, #1
 800110c:	dd02      	ble.n	8001114 <fsm_manual_run+0x11c>
 800110e:	4b61      	ldr	r3, [pc, #388]	; (8001294 <fsm_manual_run+0x29c>)
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
			 setTimer2(250);
 8001114:	20fa      	movs	r0, #250	; 0xfa
 8001116:	f000 fb01 	bl	800171c <setTimer2>
		 if(timer_flag1==1)
 800111a:	4b5f      	ldr	r3, [pc, #380]	; (8001298 <fsm_manual_run+0x2a0>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d10b      	bne.n	800113a <fsm_manual_run+0x142>
			HAL_GPIO_TogglePin(YEL1_GPIO_Port, YEL1_Pin);
 8001122:	2108      	movs	r1, #8
 8001124:	485d      	ldr	r0, [pc, #372]	; (800129c <fsm_manual_run+0x2a4>)
 8001126:	f000 fefa 	bl	8001f1e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(YEL2_GPIO_Port, YEL2_Pin);
 800112a:	2140      	movs	r1, #64	; 0x40
 800112c:	485b      	ldr	r0, [pc, #364]	; (800129c <fsm_manual_run+0x2a4>)
 800112e:	f000 fef6 	bl	8001f1e <HAL_GPIO_TogglePin>
			setTimer1(500);
 8001132:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001136:	f000 fabd 	bl	80016b4 <setTimer1>
		 if(timer_flag==1)
 800113a:	4b59      	ldr	r3, [pc, #356]	; (80012a0 <fsm_manual_run+0x2a8>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d106      	bne.n	8001150 <fsm_manual_run+0x158>
			 status=RED_GRE;
 8001142:	4b51      	ldr	r3, [pc, #324]	; (8001288 <fsm_manual_run+0x290>)
 8001144:	2202      	movs	r2, #2
 8001146:	601a      	str	r2, [r3, #0]
			 setTimer(5000);
 8001148:	f241 3088 	movw	r0, #5000	; 0x1388
 800114c:	f000 fa7e 	bl	800164c <setTimer>
		 if(isButton1Pressed()==1)
 8001150:	f7ff faa4 	bl	800069c <isButton1Pressed>
 8001154:	4603      	mov	r3, r0
 8001156:	2b01      	cmp	r3, #1
 8001158:	d10f      	bne.n	800117a <fsm_manual_run+0x182>
			 all_led_off();
 800115a:	f7fe fff7 	bl	800014c <all_led_off>
			 status=SET_GRE;
 800115e:	4b4a      	ldr	r3, [pc, #296]	; (8001288 <fsm_manual_run+0x290>)
 8001160:	220d      	movs	r2, #13
 8001162:	601a      	str	r2, [r3, #0]
			 setTimer(10000);
 8001164:	f242 7010 	movw	r0, #10000	; 0x2710
 8001168:	f000 fa70 	bl	800164c <setTimer>
			 setTimer1(500);
 800116c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001170:	f000 faa0 	bl	80016b4 <setTimer1>
			 setTimer2(250);
 8001174:	20fa      	movs	r0, #250	; 0xfa
 8001176:	f000 fad1 	bl	800171c <setTimer2>
		 if(isButton2Pressed())
 800117a:	f7ff fb07 	bl	800078c <isButton2Pressed>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d07c      	beq.n	800127e <fsm_manual_run+0x286>
			 yel_sec++;
 8001184:	4b47      	ldr	r3, [pc, #284]	; (80012a4 <fsm_manual_run+0x2ac>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	3301      	adds	r3, #1
 800118a:	4a46      	ldr	r2, [pc, #280]	; (80012a4 <fsm_manual_run+0x2ac>)
 800118c:	6013      	str	r3, [r2, #0]
			 if(yel_sec>99) red_sec=1;
 800118e:	4b45      	ldr	r3, [pc, #276]	; (80012a4 <fsm_manual_run+0x2ac>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2b63      	cmp	r3, #99	; 0x63
 8001194:	dd02      	ble.n	800119c <fsm_manual_run+0x1a4>
 8001196:	4b3d      	ldr	r3, [pc, #244]	; (800128c <fsm_manual_run+0x294>)
 8001198:	2201      	movs	r2, #1
 800119a:	601a      	str	r2, [r3, #0]
			 setTimer(10000);
 800119c:	f242 7010 	movw	r0, #10000	; 0x2710
 80011a0:	f000 fa54 	bl	800164c <setTimer>
			 setTimer2(250);
 80011a4:	20fa      	movs	r0, #250	; 0xfa
 80011a6:	f000 fab9 	bl	800171c <setTimer2>
		 break;
 80011aa:	e068      	b.n	800127e <fsm_manual_run+0x286>
		 updateled(3, gre_sec);
 80011ac:	4b3e      	ldr	r3, [pc, #248]	; (80012a8 <fsm_manual_run+0x2b0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4619      	mov	r1, r3
 80011b2:	2003      	movs	r0, #3
 80011b4:	f000 f8a8 	bl	8001308 <updateled>
		 if(timer_flag2==1)
 80011b8:	4b35      	ldr	r3, [pc, #212]	; (8001290 <fsm_manual_run+0x298>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d111      	bne.n	80011e4 <fsm_manual_run+0x1ec>
			 update7SEG(index2++);
 80011c0:	4b34      	ldr	r3, [pc, #208]	; (8001294 <fsm_manual_run+0x29c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	1c5a      	adds	r2, r3, #1
 80011c6:	4933      	ldr	r1, [pc, #204]	; (8001294 <fsm_manual_run+0x29c>)
 80011c8:	600a      	str	r2, [r1, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 f86e 	bl	80012ac <update7SEG>
			 if(index2>1)index2=0;
 80011d0:	4b30      	ldr	r3, [pc, #192]	; (8001294 <fsm_manual_run+0x29c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	dd02      	ble.n	80011de <fsm_manual_run+0x1e6>
 80011d8:	4b2e      	ldr	r3, [pc, #184]	; (8001294 <fsm_manual_run+0x29c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
			 setTimer2(250);
 80011de:	20fa      	movs	r0, #250	; 0xfa
 80011e0:	f000 fa9c 	bl	800171c <setTimer2>
		 if(timer_flag1==1)
 80011e4:	4b2c      	ldr	r3, [pc, #176]	; (8001298 <fsm_manual_run+0x2a0>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d10b      	bne.n	8001204 <fsm_manual_run+0x20c>
			HAL_GPIO_TogglePin(GRE1_GPIO_Port, GRE1_Pin);
 80011ec:	2110      	movs	r1, #16
 80011ee:	482b      	ldr	r0, [pc, #172]	; (800129c <fsm_manual_run+0x2a4>)
 80011f0:	f000 fe95 	bl	8001f1e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GRE2_GPIO_Port, GRE2_Pin);
 80011f4:	2180      	movs	r1, #128	; 0x80
 80011f6:	4829      	ldr	r0, [pc, #164]	; (800129c <fsm_manual_run+0x2a4>)
 80011f8:	f000 fe91 	bl	8001f1e <HAL_GPIO_TogglePin>
			setTimer1(500);
 80011fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001200:	f000 fa58 	bl	80016b4 <setTimer1>
		 if(timer_flag==1)
 8001204:	4b26      	ldr	r3, [pc, #152]	; (80012a0 <fsm_manual_run+0x2a8>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d106      	bne.n	800121a <fsm_manual_run+0x222>
			 status=RED_GRE;
 800120c:	4b1e      	ldr	r3, [pc, #120]	; (8001288 <fsm_manual_run+0x290>)
 800120e:	2202      	movs	r2, #2
 8001210:	601a      	str	r2, [r3, #0]
			 setTimer(5000);
 8001212:	f241 3088 	movw	r0, #5000	; 0x1388
 8001216:	f000 fa19 	bl	800164c <setTimer>
		 if(isButton1Pressed()==1)
 800121a:	f7ff fa3f 	bl	800069c <isButton1Pressed>
 800121e:	4603      	mov	r3, r0
 8001220:	2b01      	cmp	r3, #1
 8001222:	d10f      	bne.n	8001244 <fsm_manual_run+0x24c>
			 all_led_off();
 8001224:	f7fe ff92 	bl	800014c <all_led_off>
			 status=SET_RED;
 8001228:	4b17      	ldr	r3, [pc, #92]	; (8001288 <fsm_manual_run+0x290>)
 800122a:	220b      	movs	r2, #11
 800122c:	601a      	str	r2, [r3, #0]
			 setTimer(10000);
 800122e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001232:	f000 fa0b 	bl	800164c <setTimer>
			 setTimer1(500);
 8001236:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800123a:	f000 fa3b 	bl	80016b4 <setTimer1>
			 setTimer2(250);
 800123e:	20fa      	movs	r0, #250	; 0xfa
 8001240:	f000 fa6c 	bl	800171c <setTimer2>
		 if(isButton2Pressed())
 8001244:	f7ff faa2 	bl	800078c <isButton2Pressed>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d019      	beq.n	8001282 <fsm_manual_run+0x28a>
			 gre_sec++;
 800124e:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <fsm_manual_run+0x2b0>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	3301      	adds	r3, #1
 8001254:	4a14      	ldr	r2, [pc, #80]	; (80012a8 <fsm_manual_run+0x2b0>)
 8001256:	6013      	str	r3, [r2, #0]
			 if(gre_sec>99) gre_sec=1;
 8001258:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <fsm_manual_run+0x2b0>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b63      	cmp	r3, #99	; 0x63
 800125e:	dd02      	ble.n	8001266 <fsm_manual_run+0x26e>
 8001260:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <fsm_manual_run+0x2b0>)
 8001262:	2201      	movs	r2, #1
 8001264:	601a      	str	r2, [r3, #0]
			 setTimer(10000);
 8001266:	f242 7010 	movw	r0, #10000	; 0x2710
 800126a:	f000 f9ef 	bl	800164c <setTimer>
			 setTimer2(250);
 800126e:	20fa      	movs	r0, #250	; 0xfa
 8001270:	f000 fa54 	bl	800171c <setTimer2>
		 break;
 8001274:	e005      	b.n	8001282 <fsm_manual_run+0x28a>
		 break;
 8001276:	bf00      	nop
 8001278:	e004      	b.n	8001284 <fsm_manual_run+0x28c>
		 break;
 800127a:	bf00      	nop
 800127c:	e002      	b.n	8001284 <fsm_manual_run+0x28c>
		 break;
 800127e:	bf00      	nop
 8001280:	e000      	b.n	8001284 <fsm_manual_run+0x28c>
		 break;
 8001282:	bf00      	nop
	 }
 }
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}
 8001288:	2000009c 	.word	0x2000009c
 800128c:	20000000 	.word	0x20000000
 8001290:	200000b4 	.word	0x200000b4
 8001294:	200000b8 	.word	0x200000b8
 8001298:	200000ac 	.word	0x200000ac
 800129c:	40010800 	.word	0x40010800
 80012a0:	200000a4 	.word	0x200000a4
 80012a4:	20000004 	.word	0x20000004
 80012a8:	20000008 	.word	0x20000008

080012ac <update7SEG>:
#include "global.h"
int MAX_LED=2;
int index=0;
int led_buffer[4]={1,2,3,4};

void update7SEG (int index ) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	switch(index)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <update7SEG+0x16>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d00e      	beq.n	80012de <update7SEG+0x32>
		display7SEG1(led_buffer[1]);
		display7SEG2(led_buffer[3]);
		open7segNumber(index);
		break;
	}
}
 80012c0:	e01b      	b.n	80012fa <update7SEG+0x4e>
		display7SEG1(led_buffer[0]);
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <update7SEG+0x58>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fb3e 	bl	8000948 <display7SEG1>
		display7SEG2(led_buffer[2]);
 80012cc:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <update7SEG+0x58>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fcc7 	bl	8000c64 <display7SEG2>
		open7segNumber(index);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f000 f974 	bl	80015c4 <open7segNumber>
		break;
 80012dc:	e00d      	b.n	80012fa <update7SEG+0x4e>
		display7SEG1(led_buffer[1]);
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <update7SEG+0x58>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fb30 	bl	8000948 <display7SEG1>
		display7SEG2(led_buffer[3]);
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <update7SEG+0x58>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fcb9 	bl	8000c64 <display7SEG2>
		open7segNumber(index);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f000 f966 	bl	80015c4 <open7segNumber>
		break;
 80012f8:	bf00      	nop
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000048 	.word	0x20000048

08001308 <updateled>:
void updateled(int s1,int s2)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
	led_buffer[0]=s1/10;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a18      	ldr	r2, [pc, #96]	; (8001378 <updateled+0x70>)
 8001316:	fb82 1203 	smull	r1, r2, r2, r3
 800131a:	1092      	asrs	r2, r2, #2
 800131c:	17db      	asrs	r3, r3, #31
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	4a16      	ldr	r2, [pc, #88]	; (800137c <updateled+0x74>)
 8001322:	6013      	str	r3, [r2, #0]
	led_buffer[1]=s1%10;
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	4b14      	ldr	r3, [pc, #80]	; (8001378 <updateled+0x70>)
 8001328:	fb83 2301 	smull	r2, r3, r3, r1
 800132c:	109a      	asrs	r2, r3, #2
 800132e:	17cb      	asrs	r3, r1, #31
 8001330:	1ad2      	subs	r2, r2, r3
 8001332:	4613      	mov	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	4413      	add	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	1aca      	subs	r2, r1, r3
 800133c:	4b0f      	ldr	r3, [pc, #60]	; (800137c <updateled+0x74>)
 800133e:	605a      	str	r2, [r3, #4]
	led_buffer[2]=s2/10;
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	4a0d      	ldr	r2, [pc, #52]	; (8001378 <updateled+0x70>)
 8001344:	fb82 1203 	smull	r1, r2, r2, r3
 8001348:	1092      	asrs	r2, r2, #2
 800134a:	17db      	asrs	r3, r3, #31
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	4a0b      	ldr	r2, [pc, #44]	; (800137c <updateled+0x74>)
 8001350:	6093      	str	r3, [r2, #8]
	led_buffer[3]=s2%10;
 8001352:	6839      	ldr	r1, [r7, #0]
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <updateled+0x70>)
 8001356:	fb83 2301 	smull	r2, r3, r3, r1
 800135a:	109a      	asrs	r2, r3, #2
 800135c:	17cb      	asrs	r3, r1, #31
 800135e:	1ad2      	subs	r2, r2, r3
 8001360:	4613      	mov	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	1aca      	subs	r2, r1, r3
 800136a:	4b04      	ldr	r3, [pc, #16]	; (800137c <updateled+0x74>)
 800136c:	60da      	str	r2, [r3, #12]
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	66666667 	.word	0x66666667
 800137c:	20000048 	.word	0x20000048

08001380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001384:	f000 fab2 	bl	80018ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001388:	f000 f816 	bl	80013b8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init () ;
 800138c:	f000 f89c 	bl	80014c8 <MX_GPIO_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001390:	f000 f89a 	bl	80014c8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001394:	f000 f84c 	bl	8001430 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim2);
 8001398:	4805      	ldr	r0, [pc, #20]	; (80013b0 <main+0x30>)
 800139a:	f001 fa05 	bl	80027a8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  status=INIT;
 800139e:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <main+0x34>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  fsm_automatic_run();
 80013a4:	f7fe fef6 	bl	8000194 <fsm_automatic_run>
	  fsm_manual_run();
 80013a8:	f7ff fe26 	bl	8000ff8 <fsm_manual_run>
	  fsm_automatic_run();
 80013ac:	e7fa      	b.n	80013a4 <main+0x24>
 80013ae:	bf00      	nop
 80013b0:	200000bc 	.word	0x200000bc
 80013b4:	2000009c 	.word	0x2000009c

080013b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b090      	sub	sp, #64	; 0x40
 80013bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013be:	f107 0318 	add.w	r3, r7, #24
 80013c2:	2228      	movs	r2, #40	; 0x28
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f001 fd9e 	bl	8002f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
 80013d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013da:	2302      	movs	r3, #2
 80013dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013de:	2301      	movs	r3, #1
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013e2:	2310      	movs	r3, #16
 80013e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ea:	f107 0318 	add.w	r3, r7, #24
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 fdae 	bl	8001f50 <HAL_RCC_OscConfig>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <SystemClock_Config+0x46>
  {
    Error_Handler();
 80013fa:	f000 f8dd 	bl	80015b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013fe:	230f      	movs	r3, #15
 8001400:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f001 f81a 	bl	8002450 <HAL_RCC_ClockConfig>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001422:	f000 f8c9 	bl	80015b8 <Error_Handler>
  }
}
 8001426:	bf00      	nop
 8001428:	3740      	adds	r7, #64	; 0x40
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001436:	f107 0308 	add.w	r3, r7, #8
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001444:	463b      	mov	r3, r7
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800144c:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <MX_TIM2_Init+0x94>)
 800144e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001452:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001454:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <MX_TIM2_Init+0x94>)
 8001456:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800145a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145c:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <MX_TIM2_Init+0x94>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001462:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <MX_TIM2_Init+0x94>)
 8001464:	2209      	movs	r2, #9
 8001466:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001468:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <MX_TIM2_Init+0x94>)
 800146a:	2200      	movs	r2, #0
 800146c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146e:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <MX_TIM2_Init+0x94>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001474:	4813      	ldr	r0, [pc, #76]	; (80014c4 <MX_TIM2_Init+0x94>)
 8001476:	f001 f947 	bl	8002708 <HAL_TIM_Base_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001480:	f000 f89a 	bl	80015b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001488:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800148a:	f107 0308 	add.w	r3, r7, #8
 800148e:	4619      	mov	r1, r3
 8001490:	480c      	ldr	r0, [pc, #48]	; (80014c4 <MX_TIM2_Init+0x94>)
 8001492:	f001 fac5 	bl	8002a20 <HAL_TIM_ConfigClockSource>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800149c:	f000 f88c 	bl	80015b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a0:	2300      	movs	r3, #0
 80014a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014a8:	463b      	mov	r3, r7
 80014aa:	4619      	mov	r1, r3
 80014ac:	4805      	ldr	r0, [pc, #20]	; (80014c4 <MX_TIM2_Init+0x94>)
 80014ae:	f001 fc9d 	bl	8002dec <HAL_TIMEx_MasterConfigSynchronization>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80014b8:	f000 f87e 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014bc:	bf00      	nop
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	200000bc 	.word	0x200000bc

080014c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ce:	f107 0308 	add.w	r3, r7, #8
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014dc:	4b29      	ldr	r3, [pc, #164]	; (8001584 <MX_GPIO_Init+0xbc>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	4a28      	ldr	r2, [pc, #160]	; (8001584 <MX_GPIO_Init+0xbc>)
 80014e2:	f043 0304 	orr.w	r3, r3, #4
 80014e6:	6193      	str	r3, [r2, #24]
 80014e8:	4b26      	ldr	r3, [pc, #152]	; (8001584 <MX_GPIO_Init+0xbc>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f4:	4b23      	ldr	r3, [pc, #140]	; (8001584 <MX_GPIO_Init+0xbc>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	4a22      	ldr	r2, [pc, #136]	; (8001584 <MX_GPIO_Init+0xbc>)
 80014fa:	f043 0308 	orr.w	r3, r3, #8
 80014fe:	6193      	str	r3, [r2, #24]
 8001500:	4b20      	ldr	r3, [pc, #128]	; (8001584 <MX_GPIO_Init+0xbc>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	f003 0308 	and.w	r3, r3, #8
 8001508:	603b      	str	r3, [r7, #0]
 800150a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|YEL1_Pin|GRE1_Pin|RED2_Pin
 800150c:	2200      	movs	r2, #0
 800150e:	f640 71fc 	movw	r1, #4092	; 0xffc
 8001512:	481d      	ldr	r0, [pc, #116]	; (8001588 <MX_GPIO_Init+0xc0>)
 8001514:	f000 fceb 	bl	8001eee <HAL_GPIO_WritePin>
                          |YEL2_Pin|GRE2_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin|EN4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG11_Pin
 8001518:	2200      	movs	r2, #0
 800151a:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800151e:	481b      	ldr	r0, [pc, #108]	; (800158c <MX_GPIO_Init+0xc4>)
 8001520:	f000 fce5 	bl	8001eee <HAL_GPIO_WritePin>
                          |SEG9_Pin|SEG10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED1_Pin YEL1_Pin GRE1_Pin RED2_Pin
                           YEL2_Pin GRE2_Pin EN1_Pin EN2_Pin
                           EN3_Pin EN4_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|YEL1_Pin|GRE1_Pin|RED2_Pin
 8001524:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001528:	60bb      	str	r3, [r7, #8]
                          |YEL2_Pin|GRE2_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin|EN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152a:	2301      	movs	r3, #1
 800152c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	2302      	movs	r3, #2
 8001534:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001536:	f107 0308 	add.w	r3, r7, #8
 800153a:	4619      	mov	r1, r3
 800153c:	4812      	ldr	r0, [pc, #72]	; (8001588 <MX_GPIO_Init+0xc0>)
 800153e:	f000 fb45 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG1_Pin SEG2_Pin SEG3_Pin SEG11_Pin
                           SEG12_Pin SEG13_Pin SEG14_Pin SEG4_Pin
                           SEG5_Pin SEG6_Pin SEG7_Pin SEG8_Pin
                           SEG9_Pin SEG10_Pin */
  GPIO_InitStruct.Pin = SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG11_Pin
 8001542:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001546:	60bb      	str	r3, [r7, #8]
                          |SEG12_Pin|SEG13_Pin|SEG14_Pin|SEG4_Pin
                          |SEG5_Pin|SEG6_Pin|SEG7_Pin|SEG8_Pin
                          |SEG9_Pin|SEG10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001548:	2301      	movs	r3, #1
 800154a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2302      	movs	r3, #2
 8001552:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001554:	f107 0308 	add.w	r3, r7, #8
 8001558:	4619      	mov	r1, r3
 800155a:	480c      	ldr	r0, [pc, #48]	; (800158c <MX_GPIO_Init+0xc4>)
 800155c:	f000 fb36 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT1_Pin BUT2_Pin BUT3_Pin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin|BUT3_Pin;
 8001560:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001564:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800156a:	2301      	movs	r3, #1
 800156c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156e:	f107 0308 	add.w	r3, r7, #8
 8001572:	4619      	mov	r1, r3
 8001574:	4804      	ldr	r0, [pc, #16]	; (8001588 <MX_GPIO_Init+0xc0>)
 8001576:	f000 fb29 	bl	8001bcc <HAL_GPIO_Init>

}
 800157a:	bf00      	nop
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40021000 	.word	0x40021000
 8001588:	40010800 	.word	0x40010800
 800158c:	40010c00 	.word	0x40010c00

08001590 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	 timer_run();
 8001598:	f000 f872 	bl	8001680 <timer_run>
	 timer_run1();
 800159c:	f000 f8a4 	bl	80016e8 <timer_run1>
	 timer_run2();
 80015a0:	f000 f8d6 	bl	8001750 <timer_run2>
	 getKeyInput();
 80015a4:	f7ff f898 	bl	80006d8 <getKeyInput>
	 getKeyInput2();
 80015a8:	f7ff f90e 	bl	80007c8 <getKeyInput2>
	 getKeyInput3();
 80015ac:	f7ff f972 	bl	8000894 <getKeyInput3>


}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015bc:	b672      	cpsid	i
}
 80015be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <Error_Handler+0x8>
	...

080015c4 <open7segNumber>:
#include"main.h"
#include "global.h"
#include "led_update.h"
int x=0;
void open7segNumber(int x)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
	switch(x)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <open7segNumber+0x16>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d019      	beq.n	800160c <open7segNumber+0x48>
		 HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
		 HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
		 HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, RESET);
		 break;
	default:
		break;
 80015d8:	e031      	b.n	800163e <open7segNumber+0x7a>
		 HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80015da:	2200      	movs	r2, #0
 80015dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015e0:	4819      	ldr	r0, [pc, #100]	; (8001648 <open7segNumber+0x84>)
 80015e2:	f000 fc84 	bl	8001eee <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80015e6:	2201      	movs	r2, #1
 80015e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015ec:	4816      	ldr	r0, [pc, #88]	; (8001648 <open7segNumber+0x84>)
 80015ee:	f000 fc7e 	bl	8001eee <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80015f2:	2200      	movs	r2, #0
 80015f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015f8:	4813      	ldr	r0, [pc, #76]	; (8001648 <open7segNumber+0x84>)
 80015fa:	f000 fc78 	bl	8001eee <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, SET);
 80015fe:	2201      	movs	r2, #1
 8001600:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001604:	4810      	ldr	r0, [pc, #64]	; (8001648 <open7segNumber+0x84>)
 8001606:	f000 fc72 	bl	8001eee <HAL_GPIO_WritePin>
		 break;
 800160a:	e018      	b.n	800163e <open7segNumber+0x7a>
		 HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 800160c:	2201      	movs	r2, #1
 800160e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001612:	480d      	ldr	r0, [pc, #52]	; (8001648 <open7segNumber+0x84>)
 8001614:	f000 fc6b 	bl	8001eee <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8001618:	2200      	movs	r2, #0
 800161a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800161e:	480a      	ldr	r0, [pc, #40]	; (8001648 <open7segNumber+0x84>)
 8001620:	f000 fc65 	bl	8001eee <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8001624:	2201      	movs	r2, #1
 8001626:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800162a:	4807      	ldr	r0, [pc, #28]	; (8001648 <open7segNumber+0x84>)
 800162c:	f000 fc5f 	bl	8001eee <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, RESET);
 8001630:	2200      	movs	r2, #0
 8001632:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001636:	4804      	ldr	r0, [pc, #16]	; (8001648 <open7segNumber+0x84>)
 8001638:	f000 fc59 	bl	8001eee <HAL_GPIO_WritePin>
		 break;
 800163c:	bf00      	nop
	}
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40010800 	.word	0x40010800

0800164c <setTimer>:
int timer_count1=0;
int timer_flag1=0;
int timer_count2=0;
int timer_flag2=0;
void setTimer(int duration)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	timer_count=duration/TIME_CYCLE;
 8001654:	4b07      	ldr	r3, [pc, #28]	; (8001674 <setTimer+0x28>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	fb92 f3f3 	sdiv	r3, r2, r3
 800165e:	4a06      	ldr	r2, [pc, #24]	; (8001678 <setTimer+0x2c>)
 8001660:	6013      	str	r3, [r2, #0]
	timer_flag=0;
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <setTimer+0x30>)
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20000058 	.word	0x20000058
 8001678:	200000a0 	.word	0x200000a0
 800167c:	200000a4 	.word	0x200000a4

08001680 <timer_run>:

void timer_run()
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
	if(timer_count>0)
 8001684:	4b09      	ldr	r3, [pc, #36]	; (80016ac <timer_run+0x2c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	dd0b      	ble.n	80016a4 <timer_run+0x24>
		{
		timer_count--;
 800168c:	4b07      	ldr	r3, [pc, #28]	; (80016ac <timer_run+0x2c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	3b01      	subs	r3, #1
 8001692:	4a06      	ldr	r2, [pc, #24]	; (80016ac <timer_run+0x2c>)
 8001694:	6013      	str	r3, [r2, #0]
		if(timer_count==0)timer_flag=1;
 8001696:	4b05      	ldr	r3, [pc, #20]	; (80016ac <timer_run+0x2c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d102      	bne.n	80016a4 <timer_run+0x24>
 800169e:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <timer_run+0x30>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	601a      	str	r2, [r3, #0]
		}
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr
 80016ac:	200000a0 	.word	0x200000a0
 80016b0:	200000a4 	.word	0x200000a4

080016b4 <setTimer1>:
void setTimer1(int duration)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	timer_count1=duration/TIME_CYCLE;
 80016bc:	4b07      	ldr	r3, [pc, #28]	; (80016dc <setTimer1+0x28>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80016c6:	4a06      	ldr	r2, [pc, #24]	; (80016e0 <setTimer1+0x2c>)
 80016c8:	6013      	str	r3, [r2, #0]
	timer_flag1=0;
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <setTimer1+0x30>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20000058 	.word	0x20000058
 80016e0:	200000a8 	.word	0x200000a8
 80016e4:	200000ac 	.word	0x200000ac

080016e8 <timer_run1>:
void timer_run1()
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
	if(timer_count1>0)
 80016ec:	4b09      	ldr	r3, [pc, #36]	; (8001714 <timer_run1+0x2c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	dd0b      	ble.n	800170c <timer_run1+0x24>
		{
		timer_count1--;
 80016f4:	4b07      	ldr	r3, [pc, #28]	; (8001714 <timer_run1+0x2c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	3b01      	subs	r3, #1
 80016fa:	4a06      	ldr	r2, [pc, #24]	; (8001714 <timer_run1+0x2c>)
 80016fc:	6013      	str	r3, [r2, #0]
		if(timer_count1==0)timer_flag1=1;
 80016fe:	4b05      	ldr	r3, [pc, #20]	; (8001714 <timer_run1+0x2c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d102      	bne.n	800170c <timer_run1+0x24>
 8001706:	4b04      	ldr	r3, [pc, #16]	; (8001718 <timer_run1+0x30>)
 8001708:	2201      	movs	r2, #1
 800170a:	601a      	str	r2, [r3, #0]
		}
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr
 8001714:	200000a8 	.word	0x200000a8
 8001718:	200000ac 	.word	0x200000ac

0800171c <setTimer2>:
void setTimer2(int duration)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	timer_count2=duration/TIME_CYCLE;
 8001724:	4b07      	ldr	r3, [pc, #28]	; (8001744 <setTimer2+0x28>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	fb92 f3f3 	sdiv	r3, r2, r3
 800172e:	4a06      	ldr	r2, [pc, #24]	; (8001748 <setTimer2+0x2c>)
 8001730:	6013      	str	r3, [r2, #0]
	timer_flag2=0;
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <setTimer2+0x30>)
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	20000058 	.word	0x20000058
 8001748:	200000b0 	.word	0x200000b0
 800174c:	200000b4 	.word	0x200000b4

08001750 <timer_run2>:
void timer_run2()
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
	if(timer_count2>0)
 8001754:	4b09      	ldr	r3, [pc, #36]	; (800177c <timer_run2+0x2c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	dd0b      	ble.n	8001774 <timer_run2+0x24>
		{
		timer_count2--;
 800175c:	4b07      	ldr	r3, [pc, #28]	; (800177c <timer_run2+0x2c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	3b01      	subs	r3, #1
 8001762:	4a06      	ldr	r2, [pc, #24]	; (800177c <timer_run2+0x2c>)
 8001764:	6013      	str	r3, [r2, #0]
		if(timer_count2==0)timer_flag2=1;
 8001766:	4b05      	ldr	r3, [pc, #20]	; (800177c <timer_run2+0x2c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d102      	bne.n	8001774 <timer_run2+0x24>
 800176e:	4b04      	ldr	r3, [pc, #16]	; (8001780 <timer_run2+0x30>)
 8001770:	2201      	movs	r2, #1
 8001772:	601a      	str	r2, [r3, #0]
		}
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr
 800177c:	200000b0 	.word	0x200000b0
 8001780:	200000b4 	.word	0x200000b4

08001784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <HAL_MspInit+0x5c>)
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	4a14      	ldr	r2, [pc, #80]	; (80017e0 <HAL_MspInit+0x5c>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6193      	str	r3, [r2, #24]
 8001796:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <HAL_MspInit+0x5c>)
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	60bb      	str	r3, [r7, #8]
 80017a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a2:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <HAL_MspInit+0x5c>)
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	4a0e      	ldr	r2, [pc, #56]	; (80017e0 <HAL_MspInit+0x5c>)
 80017a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ac:	61d3      	str	r3, [r2, #28]
 80017ae:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <HAL_MspInit+0x5c>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b6:	607b      	str	r3, [r7, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80017ba:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <HAL_MspInit+0x60>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <HAL_MspInit+0x60>)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d6:	bf00      	nop
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr
 80017e0:	40021000 	.word	0x40021000
 80017e4:	40010000 	.word	0x40010000

080017e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017f8:	d113      	bne.n	8001822 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <HAL_TIM_Base_MspInit+0x44>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	4a0b      	ldr	r2, [pc, #44]	; (800182c <HAL_TIM_Base_MspInit+0x44>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	61d3      	str	r3, [r2, #28]
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <HAL_TIM_Base_MspInit+0x44>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2100      	movs	r1, #0
 8001816:	201c      	movs	r0, #28
 8001818:	f000 f9a1 	bl	8001b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800181c:	201c      	movs	r0, #28
 800181e:	f000 f9ba 	bl	8001b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001822:	bf00      	nop
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40021000 	.word	0x40021000

08001830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001834:	e7fe      	b.n	8001834 <NMI_Handler+0x4>

08001836 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800183a:	e7fe      	b.n	800183a <HardFault_Handler+0x4>

0800183c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001840:	e7fe      	b.n	8001840 <MemManage_Handler+0x4>

08001842 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001846:	e7fe      	b.n	8001846 <BusFault_Handler+0x4>

08001848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800184c:	e7fe      	b.n	800184c <UsageFault_Handler+0x4>

0800184e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr

0800185a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr

08001866 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr

08001872 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001876:	f000 f87f 	bl	8001978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <TIM2_IRQHandler+0x10>)
 8001886:	f000 ffdb 	bl	8002840 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200000bc 	.word	0x200000bc

08001894 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr

080018a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018a0:	f7ff fff8 	bl	8001894 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018a4:	480b      	ldr	r0, [pc, #44]	; (80018d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80018a6:	490c      	ldr	r1, [pc, #48]	; (80018d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80018a8:	4a0c      	ldr	r2, [pc, #48]	; (80018dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80018aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018ac:	e002      	b.n	80018b4 <LoopCopyDataInit>

080018ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018b2:	3304      	adds	r3, #4

080018b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b8:	d3f9      	bcc.n	80018ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ba:	4a09      	ldr	r2, [pc, #36]	; (80018e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018bc:	4c09      	ldr	r4, [pc, #36]	; (80018e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c0:	e001      	b.n	80018c6 <LoopFillZerobss>

080018c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c4:	3204      	adds	r2, #4

080018c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c8:	d3fb      	bcc.n	80018c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ca:	f001 faf9 	bl	8002ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018ce:	f7ff fd57 	bl	8001380 <main>
  bx lr
 80018d2:	4770      	bx	lr
  ldr r0, =_sdata
 80018d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018d8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80018dc:	08002f5c 	.word	0x08002f5c
  ldr r2, =_sbss
 80018e0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80018e4:	20000108 	.word	0x20000108

080018e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018e8:	e7fe      	b.n	80018e8 <ADC1_2_IRQHandler>
	...

080018ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018f0:	4b08      	ldr	r3, [pc, #32]	; (8001914 <HAL_Init+0x28>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a07      	ldr	r2, [pc, #28]	; (8001914 <HAL_Init+0x28>)
 80018f6:	f043 0310 	orr.w	r3, r3, #16
 80018fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018fc:	2003      	movs	r0, #3
 80018fe:	f000 f923 	bl	8001b48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001902:	200f      	movs	r0, #15
 8001904:	f000 f808 	bl	8001918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001908:	f7ff ff3c 	bl	8001784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40022000 	.word	0x40022000

08001918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001920:	4b12      	ldr	r3, [pc, #72]	; (800196c <HAL_InitTick+0x54>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_InitTick+0x58>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	4619      	mov	r1, r3
 800192a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800192e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001932:	fbb2 f3f3 	udiv	r3, r2, r3
 8001936:	4618      	mov	r0, r3
 8001938:	f000 f93b 	bl	8001bb2 <HAL_SYSTICK_Config>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e00e      	b.n	8001964 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b0f      	cmp	r3, #15
 800194a:	d80a      	bhi.n	8001962 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800194c:	2200      	movs	r2, #0
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f000 f903 	bl	8001b5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001958:	4a06      	ldr	r2, [pc, #24]	; (8001974 <HAL_InitTick+0x5c>)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800195e:	2300      	movs	r3, #0
 8001960:	e000      	b.n	8001964 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
}
 8001964:	4618      	mov	r0, r3
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	2000005c 	.word	0x2000005c
 8001970:	20000064 	.word	0x20000064
 8001974:	20000060 	.word	0x20000060

08001978 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <HAL_IncTick+0x1c>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	461a      	mov	r2, r3
 8001982:	4b05      	ldr	r3, [pc, #20]	; (8001998 <HAL_IncTick+0x20>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4413      	add	r3, r2
 8001988:	4a03      	ldr	r2, [pc, #12]	; (8001998 <HAL_IncTick+0x20>)
 800198a:	6013      	str	r3, [r2, #0]
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	20000064 	.word	0x20000064
 8001998:	20000104 	.word	0x20000104

0800199c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return uwTick;
 80019a0:	4b02      	ldr	r3, [pc, #8]	; (80019ac <HAL_GetTick+0x10>)
 80019a2:	681b      	ldr	r3, [r3, #0]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr
 80019ac:	20000104 	.word	0x20000104

080019b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <__NVIC_SetPriorityGrouping+0x44>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019cc:	4013      	ands	r3, r2
 80019ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019e2:	4a04      	ldr	r2, [pc, #16]	; (80019f4 <__NVIC_SetPriorityGrouping+0x44>)
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	60d3      	str	r3, [r2, #12]
}
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019fc:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <__NVIC_GetPriorityGrouping+0x18>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	0a1b      	lsrs	r3, r3, #8
 8001a02:	f003 0307 	and.w	r3, r3, #7
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	db0b      	blt.n	8001a3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	f003 021f 	and.w	r2, r3, #31
 8001a2c:	4906      	ldr	r1, [pc, #24]	; (8001a48 <__NVIC_EnableIRQ+0x34>)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	095b      	lsrs	r3, r3, #5
 8001a34:	2001      	movs	r0, #1
 8001a36:	fa00 f202 	lsl.w	r2, r0, r2
 8001a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr
 8001a48:	e000e100 	.word	0xe000e100

08001a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	6039      	str	r1, [r7, #0]
 8001a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	db0a      	blt.n	8001a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	490c      	ldr	r1, [pc, #48]	; (8001a98 <__NVIC_SetPriority+0x4c>)
 8001a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6a:	0112      	lsls	r2, r2, #4
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	440b      	add	r3, r1
 8001a70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a74:	e00a      	b.n	8001a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	4908      	ldr	r1, [pc, #32]	; (8001a9c <__NVIC_SetPriority+0x50>)
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	3b04      	subs	r3, #4
 8001a84:	0112      	lsls	r2, r2, #4
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	440b      	add	r3, r1
 8001a8a:	761a      	strb	r2, [r3, #24]
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	e000e100 	.word	0xe000e100
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b089      	sub	sp, #36	; 0x24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f1c3 0307 	rsb	r3, r3, #7
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	bf28      	it	cs
 8001abe:	2304      	movcs	r3, #4
 8001ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	2b06      	cmp	r3, #6
 8001ac8:	d902      	bls.n	8001ad0 <NVIC_EncodePriority+0x30>
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3b03      	subs	r3, #3
 8001ace:	e000      	b.n	8001ad2 <NVIC_EncodePriority+0x32>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43da      	mvns	r2, r3
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	fa01 f303 	lsl.w	r3, r1, r3
 8001af2:	43d9      	mvns	r1, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	4313      	orrs	r3, r2
         );
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3724      	adds	r7, #36	; 0x24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b14:	d301      	bcc.n	8001b1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b16:	2301      	movs	r3, #1
 8001b18:	e00f      	b.n	8001b3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b1a:	4a0a      	ldr	r2, [pc, #40]	; (8001b44 <SysTick_Config+0x40>)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b22:	210f      	movs	r1, #15
 8001b24:	f04f 30ff 	mov.w	r0, #4294967295
 8001b28:	f7ff ff90 	bl	8001a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b2c:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <SysTick_Config+0x40>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b32:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <SysTick_Config+0x40>)
 8001b34:	2207      	movs	r2, #7
 8001b36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	e000e010 	.word	0xe000e010

08001b48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff ff2d 	bl	80019b0 <__NVIC_SetPriorityGrouping>
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b086      	sub	sp, #24
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	4603      	mov	r3, r0
 8001b66:	60b9      	str	r1, [r7, #8]
 8001b68:	607a      	str	r2, [r7, #4]
 8001b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b70:	f7ff ff42 	bl	80019f8 <__NVIC_GetPriorityGrouping>
 8001b74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	68b9      	ldr	r1, [r7, #8]
 8001b7a:	6978      	ldr	r0, [r7, #20]
 8001b7c:	f7ff ff90 	bl	8001aa0 <NVIC_EncodePriority>
 8001b80:	4602      	mov	r2, r0
 8001b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b86:	4611      	mov	r1, r2
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ff5f 	bl	8001a4c <__NVIC_SetPriority>
}
 8001b8e:	bf00      	nop
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff35 	bl	8001a14 <__NVIC_EnableIRQ>
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff ffa2 	bl	8001b04 <SysTick_Config>
 8001bc0:	4603      	mov	r3, r0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b08b      	sub	sp, #44	; 0x2c
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bde:	e148      	b.n	8001e72 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001be0:	2201      	movs	r2, #1
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	69fa      	ldr	r2, [r7, #28]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	f040 8137 	bne.w	8001e6c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	4aa3      	ldr	r2, [pc, #652]	; (8001e90 <HAL_GPIO_Init+0x2c4>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d05e      	beq.n	8001cc6 <HAL_GPIO_Init+0xfa>
 8001c08:	4aa1      	ldr	r2, [pc, #644]	; (8001e90 <HAL_GPIO_Init+0x2c4>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d875      	bhi.n	8001cfa <HAL_GPIO_Init+0x12e>
 8001c0e:	4aa1      	ldr	r2, [pc, #644]	; (8001e94 <HAL_GPIO_Init+0x2c8>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d058      	beq.n	8001cc6 <HAL_GPIO_Init+0xfa>
 8001c14:	4a9f      	ldr	r2, [pc, #636]	; (8001e94 <HAL_GPIO_Init+0x2c8>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d86f      	bhi.n	8001cfa <HAL_GPIO_Init+0x12e>
 8001c1a:	4a9f      	ldr	r2, [pc, #636]	; (8001e98 <HAL_GPIO_Init+0x2cc>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d052      	beq.n	8001cc6 <HAL_GPIO_Init+0xfa>
 8001c20:	4a9d      	ldr	r2, [pc, #628]	; (8001e98 <HAL_GPIO_Init+0x2cc>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d869      	bhi.n	8001cfa <HAL_GPIO_Init+0x12e>
 8001c26:	4a9d      	ldr	r2, [pc, #628]	; (8001e9c <HAL_GPIO_Init+0x2d0>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d04c      	beq.n	8001cc6 <HAL_GPIO_Init+0xfa>
 8001c2c:	4a9b      	ldr	r2, [pc, #620]	; (8001e9c <HAL_GPIO_Init+0x2d0>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d863      	bhi.n	8001cfa <HAL_GPIO_Init+0x12e>
 8001c32:	4a9b      	ldr	r2, [pc, #620]	; (8001ea0 <HAL_GPIO_Init+0x2d4>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d046      	beq.n	8001cc6 <HAL_GPIO_Init+0xfa>
 8001c38:	4a99      	ldr	r2, [pc, #612]	; (8001ea0 <HAL_GPIO_Init+0x2d4>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d85d      	bhi.n	8001cfa <HAL_GPIO_Init+0x12e>
 8001c3e:	2b12      	cmp	r3, #18
 8001c40:	d82a      	bhi.n	8001c98 <HAL_GPIO_Init+0xcc>
 8001c42:	2b12      	cmp	r3, #18
 8001c44:	d859      	bhi.n	8001cfa <HAL_GPIO_Init+0x12e>
 8001c46:	a201      	add	r2, pc, #4	; (adr r2, 8001c4c <HAL_GPIO_Init+0x80>)
 8001c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c4c:	08001cc7 	.word	0x08001cc7
 8001c50:	08001ca1 	.word	0x08001ca1
 8001c54:	08001cb3 	.word	0x08001cb3
 8001c58:	08001cf5 	.word	0x08001cf5
 8001c5c:	08001cfb 	.word	0x08001cfb
 8001c60:	08001cfb 	.word	0x08001cfb
 8001c64:	08001cfb 	.word	0x08001cfb
 8001c68:	08001cfb 	.word	0x08001cfb
 8001c6c:	08001cfb 	.word	0x08001cfb
 8001c70:	08001cfb 	.word	0x08001cfb
 8001c74:	08001cfb 	.word	0x08001cfb
 8001c78:	08001cfb 	.word	0x08001cfb
 8001c7c:	08001cfb 	.word	0x08001cfb
 8001c80:	08001cfb 	.word	0x08001cfb
 8001c84:	08001cfb 	.word	0x08001cfb
 8001c88:	08001cfb 	.word	0x08001cfb
 8001c8c:	08001cfb 	.word	0x08001cfb
 8001c90:	08001ca9 	.word	0x08001ca9
 8001c94:	08001cbd 	.word	0x08001cbd
 8001c98:	4a82      	ldr	r2, [pc, #520]	; (8001ea4 <HAL_GPIO_Init+0x2d8>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d013      	beq.n	8001cc6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c9e:	e02c      	b.n	8001cfa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	623b      	str	r3, [r7, #32]
          break;
 8001ca6:	e029      	b.n	8001cfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	3304      	adds	r3, #4
 8001cae:	623b      	str	r3, [r7, #32]
          break;
 8001cb0:	e024      	b.n	8001cfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	3308      	adds	r3, #8
 8001cb8:	623b      	str	r3, [r7, #32]
          break;
 8001cba:	e01f      	b.n	8001cfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	330c      	adds	r3, #12
 8001cc2:	623b      	str	r3, [r7, #32]
          break;
 8001cc4:	e01a      	b.n	8001cfc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d102      	bne.n	8001cd4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cce:	2304      	movs	r3, #4
 8001cd0:	623b      	str	r3, [r7, #32]
          break;
 8001cd2:	e013      	b.n	8001cfc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d105      	bne.n	8001ce8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cdc:	2308      	movs	r3, #8
 8001cde:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69fa      	ldr	r2, [r7, #28]
 8001ce4:	611a      	str	r2, [r3, #16]
          break;
 8001ce6:	e009      	b.n	8001cfc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ce8:	2308      	movs	r3, #8
 8001cea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	69fa      	ldr	r2, [r7, #28]
 8001cf0:	615a      	str	r2, [r3, #20]
          break;
 8001cf2:	e003      	b.n	8001cfc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	623b      	str	r3, [r7, #32]
          break;
 8001cf8:	e000      	b.n	8001cfc <HAL_GPIO_Init+0x130>
          break;
 8001cfa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	2bff      	cmp	r3, #255	; 0xff
 8001d00:	d801      	bhi.n	8001d06 <HAL_GPIO_Init+0x13a>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	e001      	b.n	8001d0a <HAL_GPIO_Init+0x13e>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3304      	adds	r3, #4
 8001d0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	2bff      	cmp	r3, #255	; 0xff
 8001d10:	d802      	bhi.n	8001d18 <HAL_GPIO_Init+0x14c>
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	e002      	b.n	8001d1e <HAL_GPIO_Init+0x152>
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	3b08      	subs	r3, #8
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	210f      	movs	r1, #15
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	401a      	ands	r2, r3
 8001d30:	6a39      	ldr	r1, [r7, #32]
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	fa01 f303 	lsl.w	r3, r1, r3
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f000 8090 	beq.w	8001e6c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d4c:	4b56      	ldr	r3, [pc, #344]	; (8001ea8 <HAL_GPIO_Init+0x2dc>)
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	4a55      	ldr	r2, [pc, #340]	; (8001ea8 <HAL_GPIO_Init+0x2dc>)
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	6193      	str	r3, [r2, #24]
 8001d58:	4b53      	ldr	r3, [pc, #332]	; (8001ea8 <HAL_GPIO_Init+0x2dc>)
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d64:	4a51      	ldr	r2, [pc, #324]	; (8001eac <HAL_GPIO_Init+0x2e0>)
 8001d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d68:	089b      	lsrs	r3, r3, #2
 8001d6a:	3302      	adds	r3, #2
 8001d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	f003 0303 	and.w	r3, r3, #3
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	220f      	movs	r2, #15
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	4013      	ands	r3, r2
 8001d86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a49      	ldr	r2, [pc, #292]	; (8001eb0 <HAL_GPIO_Init+0x2e4>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d00d      	beq.n	8001dac <HAL_GPIO_Init+0x1e0>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a48      	ldr	r2, [pc, #288]	; (8001eb4 <HAL_GPIO_Init+0x2e8>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d007      	beq.n	8001da8 <HAL_GPIO_Init+0x1dc>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a47      	ldr	r2, [pc, #284]	; (8001eb8 <HAL_GPIO_Init+0x2ec>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d101      	bne.n	8001da4 <HAL_GPIO_Init+0x1d8>
 8001da0:	2302      	movs	r3, #2
 8001da2:	e004      	b.n	8001dae <HAL_GPIO_Init+0x1e2>
 8001da4:	2303      	movs	r3, #3
 8001da6:	e002      	b.n	8001dae <HAL_GPIO_Init+0x1e2>
 8001da8:	2301      	movs	r3, #1
 8001daa:	e000      	b.n	8001dae <HAL_GPIO_Init+0x1e2>
 8001dac:	2300      	movs	r3, #0
 8001dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db0:	f002 0203 	and.w	r2, r2, #3
 8001db4:	0092      	lsls	r2, r2, #2
 8001db6:	4093      	lsls	r3, r2
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dbe:	493b      	ldr	r1, [pc, #236]	; (8001eac <HAL_GPIO_Init+0x2e0>)
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc2:	089b      	lsrs	r3, r3, #2
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d006      	beq.n	8001de6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dd8:	4b38      	ldr	r3, [pc, #224]	; (8001ebc <HAL_GPIO_Init+0x2f0>)
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	4937      	ldr	r1, [pc, #220]	; (8001ebc <HAL_GPIO_Init+0x2f0>)
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	608b      	str	r3, [r1, #8]
 8001de4:	e006      	b.n	8001df4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001de6:	4b35      	ldr	r3, [pc, #212]	; (8001ebc <HAL_GPIO_Init+0x2f0>)
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	4933      	ldr	r1, [pc, #204]	; (8001ebc <HAL_GPIO_Init+0x2f0>)
 8001df0:	4013      	ands	r3, r2
 8001df2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d006      	beq.n	8001e0e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e00:	4b2e      	ldr	r3, [pc, #184]	; (8001ebc <HAL_GPIO_Init+0x2f0>)
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	492d      	ldr	r1, [pc, #180]	; (8001ebc <HAL_GPIO_Init+0x2f0>)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	60cb      	str	r3, [r1, #12]
 8001e0c:	e006      	b.n	8001e1c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e0e:	4b2b      	ldr	r3, [pc, #172]	; (8001ebc <HAL_GPIO_Init+0x2f0>)
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	4929      	ldr	r1, [pc, #164]	; (8001ebc <HAL_GPIO_Init+0x2f0>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d006      	beq.n	8001e36 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e28:	4b24      	ldr	r3, [pc, #144]	; (8001ebc <HAL_GPIO_Init+0x2f0>)
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	4923      	ldr	r1, [pc, #140]	; (8001ebc <HAL_GPIO_Init+0x2f0>)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	604b      	str	r3, [r1, #4]
 8001e34:	e006      	b.n	8001e44 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e36:	4b21      	ldr	r3, [pc, #132]	; (8001ebc <HAL_GPIO_Init+0x2f0>)
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	491f      	ldr	r1, [pc, #124]	; (8001ebc <HAL_GPIO_Init+0x2f0>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d006      	beq.n	8001e5e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e50:	4b1a      	ldr	r3, [pc, #104]	; (8001ebc <HAL_GPIO_Init+0x2f0>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	4919      	ldr	r1, [pc, #100]	; (8001ebc <HAL_GPIO_Init+0x2f0>)
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	600b      	str	r3, [r1, #0]
 8001e5c:	e006      	b.n	8001e6c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e5e:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <HAL_GPIO_Init+0x2f0>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	43db      	mvns	r3, r3
 8001e66:	4915      	ldr	r1, [pc, #84]	; (8001ebc <HAL_GPIO_Init+0x2f0>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	3301      	adds	r3, #1
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	fa22 f303 	lsr.w	r3, r2, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f47f aeaf 	bne.w	8001be0 <HAL_GPIO_Init+0x14>
  }
}
 8001e82:	bf00      	nop
 8001e84:	bf00      	nop
 8001e86:	372c      	adds	r7, #44	; 0x2c
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	10320000 	.word	0x10320000
 8001e94:	10310000 	.word	0x10310000
 8001e98:	10220000 	.word	0x10220000
 8001e9c:	10210000 	.word	0x10210000
 8001ea0:	10120000 	.word	0x10120000
 8001ea4:	10110000 	.word	0x10110000
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	40010000 	.word	0x40010000
 8001eb0:	40010800 	.word	0x40010800
 8001eb4:	40010c00 	.word	0x40010c00
 8001eb8:	40011000 	.word	0x40011000
 8001ebc:	40010400 	.word	0x40010400

08001ec0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	887b      	ldrh	r3, [r7, #2]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d002      	beq.n	8001ede <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	73fb      	strb	r3, [r7, #15]
 8001edc:	e001      	b.n	8001ee2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr

08001eee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	807b      	strh	r3, [r7, #2]
 8001efa:	4613      	mov	r3, r2
 8001efc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001efe:	787b      	ldrb	r3, [r7, #1]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f04:	887a      	ldrh	r2, [r7, #2]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f0a:	e003      	b.n	8001f14 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f0c:	887b      	ldrh	r3, [r7, #2]
 8001f0e:	041a      	lsls	r2, r3, #16
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	611a      	str	r2, [r3, #16]
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr

08001f1e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b085      	sub	sp, #20
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	460b      	mov	r3, r1
 8001f28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f30:	887a      	ldrh	r2, [r7, #2]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	4013      	ands	r3, r2
 8001f36:	041a      	lsls	r2, r3, #16
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	43d9      	mvns	r1, r3
 8001f3c:	887b      	ldrh	r3, [r7, #2]
 8001f3e:	400b      	ands	r3, r1
 8001f40:	431a      	orrs	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	611a      	str	r2, [r3, #16]
}
 8001f46:	bf00      	nop
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr

08001f50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e26c      	b.n	800243c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 8087 	beq.w	800207e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f70:	4b92      	ldr	r3, [pc, #584]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 030c 	and.w	r3, r3, #12
 8001f78:	2b04      	cmp	r3, #4
 8001f7a:	d00c      	beq.n	8001f96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f7c:	4b8f      	ldr	r3, [pc, #572]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 030c 	and.w	r3, r3, #12
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	d112      	bne.n	8001fae <HAL_RCC_OscConfig+0x5e>
 8001f88:	4b8c      	ldr	r3, [pc, #560]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f94:	d10b      	bne.n	8001fae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f96:	4b89      	ldr	r3, [pc, #548]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d06c      	beq.n	800207c <HAL_RCC_OscConfig+0x12c>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d168      	bne.n	800207c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e246      	b.n	800243c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fb6:	d106      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x76>
 8001fb8:	4b80      	ldr	r3, [pc, #512]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a7f      	ldr	r2, [pc, #508]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc2:	6013      	str	r3, [r2, #0]
 8001fc4:	e02e      	b.n	8002024 <HAL_RCC_OscConfig+0xd4>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x98>
 8001fce:	4b7b      	ldr	r3, [pc, #492]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a7a      	ldr	r2, [pc, #488]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	4b78      	ldr	r3, [pc, #480]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a77      	ldr	r2, [pc, #476]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	e01d      	b.n	8002024 <HAL_RCC_OscConfig+0xd4>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ff0:	d10c      	bne.n	800200c <HAL_RCC_OscConfig+0xbc>
 8001ff2:	4b72      	ldr	r3, [pc, #456]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a71      	ldr	r2, [pc, #452]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	4b6f      	ldr	r3, [pc, #444]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a6e      	ldr	r2, [pc, #440]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	e00b      	b.n	8002024 <HAL_RCC_OscConfig+0xd4>
 800200c:	4b6b      	ldr	r3, [pc, #428]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a6a      	ldr	r2, [pc, #424]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002016:	6013      	str	r3, [r2, #0]
 8002018:	4b68      	ldr	r3, [pc, #416]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a67      	ldr	r2, [pc, #412]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 800201e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002022:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d013      	beq.n	8002054 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202c:	f7ff fcb6 	bl	800199c <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002034:	f7ff fcb2 	bl	800199c <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b64      	cmp	r3, #100	; 0x64
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e1fa      	b.n	800243c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002046:	4b5d      	ldr	r3, [pc, #372]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f0      	beq.n	8002034 <HAL_RCC_OscConfig+0xe4>
 8002052:	e014      	b.n	800207e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002054:	f7ff fca2 	bl	800199c <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800205c:	f7ff fc9e 	bl	800199c <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b64      	cmp	r3, #100	; 0x64
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e1e6      	b.n	800243c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800206e:	4b53      	ldr	r3, [pc, #332]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x10c>
 800207a:	e000      	b.n	800207e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800207c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d063      	beq.n	8002152 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800208a:	4b4c      	ldr	r3, [pc, #304]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 030c 	and.w	r3, r3, #12
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00b      	beq.n	80020ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002096:	4b49      	ldr	r3, [pc, #292]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 030c 	and.w	r3, r3, #12
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d11c      	bne.n	80020dc <HAL_RCC_OscConfig+0x18c>
 80020a2:	4b46      	ldr	r3, [pc, #280]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d116      	bne.n	80020dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ae:	4b43      	ldr	r3, [pc, #268]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d005      	beq.n	80020c6 <HAL_RCC_OscConfig+0x176>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d001      	beq.n	80020c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e1ba      	b.n	800243c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c6:	4b3d      	ldr	r3, [pc, #244]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4939      	ldr	r1, [pc, #228]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020da:	e03a      	b.n	8002152 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d020      	beq.n	8002126 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020e4:	4b36      	ldr	r3, [pc, #216]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ea:	f7ff fc57 	bl	800199c <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f2:	f7ff fc53 	bl	800199c <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e19b      	b.n	800243c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002104:	4b2d      	ldr	r3, [pc, #180]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0f0      	beq.n	80020f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002110:	4b2a      	ldr	r3, [pc, #168]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4927      	ldr	r1, [pc, #156]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002120:	4313      	orrs	r3, r2
 8002122:	600b      	str	r3, [r1, #0]
 8002124:	e015      	b.n	8002152 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002126:	4b26      	ldr	r3, [pc, #152]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212c:	f7ff fc36 	bl	800199c <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002134:	f7ff fc32 	bl	800199c <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e17a      	b.n	800243c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002146:	4b1d      	ldr	r3, [pc, #116]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	2b00      	cmp	r3, #0
 800215c:	d03a      	beq.n	80021d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d019      	beq.n	800219a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002166:	4b17      	ldr	r3, [pc, #92]	; (80021c4 <HAL_RCC_OscConfig+0x274>)
 8002168:	2201      	movs	r2, #1
 800216a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216c:	f7ff fc16 	bl	800199c <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002174:	f7ff fc12 	bl	800199c <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e15a      	b.n	800243c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002186:	4b0d      	ldr	r3, [pc, #52]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f0      	beq.n	8002174 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002192:	2001      	movs	r0, #1
 8002194:	f000 fa9a 	bl	80026cc <RCC_Delay>
 8002198:	e01c      	b.n	80021d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800219a:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <HAL_RCC_OscConfig+0x274>)
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a0:	f7ff fbfc 	bl	800199c <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a6:	e00f      	b.n	80021c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a8:	f7ff fbf8 	bl	800199c <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d908      	bls.n	80021c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e140      	b.n	800243c <HAL_RCC_OscConfig+0x4ec>
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000
 80021c0:	42420000 	.word	0x42420000
 80021c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c8:	4b9e      	ldr	r3, [pc, #632]	; (8002444 <HAL_RCC_OscConfig+0x4f4>)
 80021ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1e9      	bne.n	80021a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 80a6 	beq.w	800232e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021e2:	2300      	movs	r3, #0
 80021e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021e6:	4b97      	ldr	r3, [pc, #604]	; (8002444 <HAL_RCC_OscConfig+0x4f4>)
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10d      	bne.n	800220e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021f2:	4b94      	ldr	r3, [pc, #592]	; (8002444 <HAL_RCC_OscConfig+0x4f4>)
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	4a93      	ldr	r2, [pc, #588]	; (8002444 <HAL_RCC_OscConfig+0x4f4>)
 80021f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021fc:	61d3      	str	r3, [r2, #28]
 80021fe:	4b91      	ldr	r3, [pc, #580]	; (8002444 <HAL_RCC_OscConfig+0x4f4>)
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800220a:	2301      	movs	r3, #1
 800220c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220e:	4b8e      	ldr	r3, [pc, #568]	; (8002448 <HAL_RCC_OscConfig+0x4f8>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002216:	2b00      	cmp	r3, #0
 8002218:	d118      	bne.n	800224c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800221a:	4b8b      	ldr	r3, [pc, #556]	; (8002448 <HAL_RCC_OscConfig+0x4f8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a8a      	ldr	r2, [pc, #552]	; (8002448 <HAL_RCC_OscConfig+0x4f8>)
 8002220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002226:	f7ff fbb9 	bl	800199c <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800222e:	f7ff fbb5 	bl	800199c <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b64      	cmp	r3, #100	; 0x64
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e0fd      	b.n	800243c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002240:	4b81      	ldr	r3, [pc, #516]	; (8002448 <HAL_RCC_OscConfig+0x4f8>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0f0      	beq.n	800222e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d106      	bne.n	8002262 <HAL_RCC_OscConfig+0x312>
 8002254:	4b7b      	ldr	r3, [pc, #492]	; (8002444 <HAL_RCC_OscConfig+0x4f4>)
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	4a7a      	ldr	r2, [pc, #488]	; (8002444 <HAL_RCC_OscConfig+0x4f4>)
 800225a:	f043 0301 	orr.w	r3, r3, #1
 800225e:	6213      	str	r3, [r2, #32]
 8002260:	e02d      	b.n	80022be <HAL_RCC_OscConfig+0x36e>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10c      	bne.n	8002284 <HAL_RCC_OscConfig+0x334>
 800226a:	4b76      	ldr	r3, [pc, #472]	; (8002444 <HAL_RCC_OscConfig+0x4f4>)
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	4a75      	ldr	r2, [pc, #468]	; (8002444 <HAL_RCC_OscConfig+0x4f4>)
 8002270:	f023 0301 	bic.w	r3, r3, #1
 8002274:	6213      	str	r3, [r2, #32]
 8002276:	4b73      	ldr	r3, [pc, #460]	; (8002444 <HAL_RCC_OscConfig+0x4f4>)
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	4a72      	ldr	r2, [pc, #456]	; (8002444 <HAL_RCC_OscConfig+0x4f4>)
 800227c:	f023 0304 	bic.w	r3, r3, #4
 8002280:	6213      	str	r3, [r2, #32]
 8002282:	e01c      	b.n	80022be <HAL_RCC_OscConfig+0x36e>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	2b05      	cmp	r3, #5
 800228a:	d10c      	bne.n	80022a6 <HAL_RCC_OscConfig+0x356>
 800228c:	4b6d      	ldr	r3, [pc, #436]	; (8002444 <HAL_RCC_OscConfig+0x4f4>)
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	4a6c      	ldr	r2, [pc, #432]	; (8002444 <HAL_RCC_OscConfig+0x4f4>)
 8002292:	f043 0304 	orr.w	r3, r3, #4
 8002296:	6213      	str	r3, [r2, #32]
 8002298:	4b6a      	ldr	r3, [pc, #424]	; (8002444 <HAL_RCC_OscConfig+0x4f4>)
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	4a69      	ldr	r2, [pc, #420]	; (8002444 <HAL_RCC_OscConfig+0x4f4>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6213      	str	r3, [r2, #32]
 80022a4:	e00b      	b.n	80022be <HAL_RCC_OscConfig+0x36e>
 80022a6:	4b67      	ldr	r3, [pc, #412]	; (8002444 <HAL_RCC_OscConfig+0x4f4>)
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	4a66      	ldr	r2, [pc, #408]	; (8002444 <HAL_RCC_OscConfig+0x4f4>)
 80022ac:	f023 0301 	bic.w	r3, r3, #1
 80022b0:	6213      	str	r3, [r2, #32]
 80022b2:	4b64      	ldr	r3, [pc, #400]	; (8002444 <HAL_RCC_OscConfig+0x4f4>)
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	4a63      	ldr	r2, [pc, #396]	; (8002444 <HAL_RCC_OscConfig+0x4f4>)
 80022b8:	f023 0304 	bic.w	r3, r3, #4
 80022bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d015      	beq.n	80022f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c6:	f7ff fb69 	bl	800199c <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022cc:	e00a      	b.n	80022e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ce:	f7ff fb65 	bl	800199c <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022dc:	4293      	cmp	r3, r2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e0ab      	b.n	800243c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e4:	4b57      	ldr	r3, [pc, #348]	; (8002444 <HAL_RCC_OscConfig+0x4f4>)
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0ee      	beq.n	80022ce <HAL_RCC_OscConfig+0x37e>
 80022f0:	e014      	b.n	800231c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f2:	f7ff fb53 	bl	800199c <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f8:	e00a      	b.n	8002310 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022fa:	f7ff fb4f 	bl	800199c <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	f241 3288 	movw	r2, #5000	; 0x1388
 8002308:	4293      	cmp	r3, r2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e095      	b.n	800243c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002310:	4b4c      	ldr	r3, [pc, #304]	; (8002444 <HAL_RCC_OscConfig+0x4f4>)
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1ee      	bne.n	80022fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800231c:	7dfb      	ldrb	r3, [r7, #23]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d105      	bne.n	800232e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002322:	4b48      	ldr	r3, [pc, #288]	; (8002444 <HAL_RCC_OscConfig+0x4f4>)
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	4a47      	ldr	r2, [pc, #284]	; (8002444 <HAL_RCC_OscConfig+0x4f4>)
 8002328:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800232c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 8081 	beq.w	800243a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002338:	4b42      	ldr	r3, [pc, #264]	; (8002444 <HAL_RCC_OscConfig+0x4f4>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 030c 	and.w	r3, r3, #12
 8002340:	2b08      	cmp	r3, #8
 8002342:	d061      	beq.n	8002408 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	2b02      	cmp	r3, #2
 800234a:	d146      	bne.n	80023da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800234c:	4b3f      	ldr	r3, [pc, #252]	; (800244c <HAL_RCC_OscConfig+0x4fc>)
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002352:	f7ff fb23 	bl	800199c <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800235a:	f7ff fb1f 	bl	800199c <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e067      	b.n	800243c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800236c:	4b35      	ldr	r3, [pc, #212]	; (8002444 <HAL_RCC_OscConfig+0x4f4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1f0      	bne.n	800235a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002380:	d108      	bne.n	8002394 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002382:	4b30      	ldr	r3, [pc, #192]	; (8002444 <HAL_RCC_OscConfig+0x4f4>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	492d      	ldr	r1, [pc, #180]	; (8002444 <HAL_RCC_OscConfig+0x4f4>)
 8002390:	4313      	orrs	r3, r2
 8002392:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002394:	4b2b      	ldr	r3, [pc, #172]	; (8002444 <HAL_RCC_OscConfig+0x4f4>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a19      	ldr	r1, [r3, #32]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	430b      	orrs	r3, r1
 80023a6:	4927      	ldr	r1, [pc, #156]	; (8002444 <HAL_RCC_OscConfig+0x4f4>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023ac:	4b27      	ldr	r3, [pc, #156]	; (800244c <HAL_RCC_OscConfig+0x4fc>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b2:	f7ff faf3 	bl	800199c <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ba:	f7ff faef 	bl	800199c <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e037      	b.n	800243c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023cc:	4b1d      	ldr	r3, [pc, #116]	; (8002444 <HAL_RCC_OscConfig+0x4f4>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0f0      	beq.n	80023ba <HAL_RCC_OscConfig+0x46a>
 80023d8:	e02f      	b.n	800243a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023da:	4b1c      	ldr	r3, [pc, #112]	; (800244c <HAL_RCC_OscConfig+0x4fc>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7ff fadc 	bl	800199c <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e8:	f7ff fad8 	bl	800199c <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e020      	b.n	800243c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023fa:	4b12      	ldr	r3, [pc, #72]	; (8002444 <HAL_RCC_OscConfig+0x4f4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x498>
 8002406:	e018      	b.n	800243a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d101      	bne.n	8002414 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e013      	b.n	800243c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002414:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <HAL_RCC_OscConfig+0x4f4>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	429a      	cmp	r2, r3
 8002426:	d106      	bne.n	8002436 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002432:	429a      	cmp	r2, r3
 8002434:	d001      	beq.n	800243a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40021000 	.word	0x40021000
 8002448:	40007000 	.word	0x40007000
 800244c:	42420060 	.word	0x42420060

08002450 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e0d0      	b.n	8002606 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002464:	4b6a      	ldr	r3, [pc, #424]	; (8002610 <HAL_RCC_ClockConfig+0x1c0>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d910      	bls.n	8002494 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002472:	4b67      	ldr	r3, [pc, #412]	; (8002610 <HAL_RCC_ClockConfig+0x1c0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f023 0207 	bic.w	r2, r3, #7
 800247a:	4965      	ldr	r1, [pc, #404]	; (8002610 <HAL_RCC_ClockConfig+0x1c0>)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	4313      	orrs	r3, r2
 8002480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002482:	4b63      	ldr	r3, [pc, #396]	; (8002610 <HAL_RCC_ClockConfig+0x1c0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	429a      	cmp	r2, r3
 800248e:	d001      	beq.n	8002494 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e0b8      	b.n	8002606 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d020      	beq.n	80024e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d005      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024ac:	4b59      	ldr	r3, [pc, #356]	; (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	4a58      	ldr	r2, [pc, #352]	; (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 80024b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0308 	and.w	r3, r3, #8
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024c4:	4b53      	ldr	r3, [pc, #332]	; (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	4a52      	ldr	r2, [pc, #328]	; (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 80024ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d0:	4b50      	ldr	r3, [pc, #320]	; (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	494d      	ldr	r1, [pc, #308]	; (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d040      	beq.n	8002570 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d107      	bne.n	8002506 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f6:	4b47      	ldr	r3, [pc, #284]	; (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d115      	bne.n	800252e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e07f      	b.n	8002606 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b02      	cmp	r3, #2
 800250c:	d107      	bne.n	800251e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800250e:	4b41      	ldr	r3, [pc, #260]	; (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d109      	bne.n	800252e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e073      	b.n	8002606 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251e:	4b3d      	ldr	r3, [pc, #244]	; (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e06b      	b.n	8002606 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800252e:	4b39      	ldr	r3, [pc, #228]	; (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f023 0203 	bic.w	r2, r3, #3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	4936      	ldr	r1, [pc, #216]	; (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 800253c:	4313      	orrs	r3, r2
 800253e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002540:	f7ff fa2c 	bl	800199c <HAL_GetTick>
 8002544:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002546:	e00a      	b.n	800255e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002548:	f7ff fa28 	bl	800199c <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	f241 3288 	movw	r2, #5000	; 0x1388
 8002556:	4293      	cmp	r3, r2
 8002558:	d901      	bls.n	800255e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e053      	b.n	8002606 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255e:	4b2d      	ldr	r3, [pc, #180]	; (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f003 020c 	and.w	r2, r3, #12
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	429a      	cmp	r2, r3
 800256e:	d1eb      	bne.n	8002548 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002570:	4b27      	ldr	r3, [pc, #156]	; (8002610 <HAL_RCC_ClockConfig+0x1c0>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d210      	bcs.n	80025a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257e:	4b24      	ldr	r3, [pc, #144]	; (8002610 <HAL_RCC_ClockConfig+0x1c0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f023 0207 	bic.w	r2, r3, #7
 8002586:	4922      	ldr	r1, [pc, #136]	; (8002610 <HAL_RCC_ClockConfig+0x1c0>)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	4313      	orrs	r3, r2
 800258c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800258e:	4b20      	ldr	r3, [pc, #128]	; (8002610 <HAL_RCC_ClockConfig+0x1c0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	429a      	cmp	r2, r3
 800259a:	d001      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e032      	b.n	8002606 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d008      	beq.n	80025be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025ac:	4b19      	ldr	r3, [pc, #100]	; (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	4916      	ldr	r1, [pc, #88]	; (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d009      	beq.n	80025de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025ca:	4b12      	ldr	r3, [pc, #72]	; (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	490e      	ldr	r1, [pc, #56]	; (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025de:	f000 f821 	bl	8002624 <HAL_RCC_GetSysClockFreq>
 80025e2:	4602      	mov	r2, r0
 80025e4:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	091b      	lsrs	r3, r3, #4
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	490a      	ldr	r1, [pc, #40]	; (8002618 <HAL_RCC_ClockConfig+0x1c8>)
 80025f0:	5ccb      	ldrb	r3, [r1, r3]
 80025f2:	fa22 f303 	lsr.w	r3, r2, r3
 80025f6:	4a09      	ldr	r2, [pc, #36]	; (800261c <HAL_RCC_ClockConfig+0x1cc>)
 80025f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025fa:	4b09      	ldr	r3, [pc, #36]	; (8002620 <HAL_RCC_ClockConfig+0x1d0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff f98a 	bl	8001918 <HAL_InitTick>

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40022000 	.word	0x40022000
 8002614:	40021000 	.word	0x40021000
 8002618:	08002f30 	.word	0x08002f30
 800261c:	2000005c 	.word	0x2000005c
 8002620:	20000060 	.word	0x20000060

08002624 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002624:	b480      	push	{r7}
 8002626:	b087      	sub	sp, #28
 8002628:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	2300      	movs	r3, #0
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	2300      	movs	r3, #0
 8002634:	617b      	str	r3, [r7, #20]
 8002636:	2300      	movs	r3, #0
 8002638:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800263a:	2300      	movs	r3, #0
 800263c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800263e:	4b1e      	ldr	r3, [pc, #120]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f003 030c 	and.w	r3, r3, #12
 800264a:	2b04      	cmp	r3, #4
 800264c:	d002      	beq.n	8002654 <HAL_RCC_GetSysClockFreq+0x30>
 800264e:	2b08      	cmp	r3, #8
 8002650:	d003      	beq.n	800265a <HAL_RCC_GetSysClockFreq+0x36>
 8002652:	e027      	b.n	80026a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002654:	4b19      	ldr	r3, [pc, #100]	; (80026bc <HAL_RCC_GetSysClockFreq+0x98>)
 8002656:	613b      	str	r3, [r7, #16]
      break;
 8002658:	e027      	b.n	80026aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	0c9b      	lsrs	r3, r3, #18
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	4a17      	ldr	r2, [pc, #92]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002664:	5cd3      	ldrb	r3, [r2, r3]
 8002666:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d010      	beq.n	8002694 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002672:	4b11      	ldr	r3, [pc, #68]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	0c5b      	lsrs	r3, r3, #17
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	4a11      	ldr	r2, [pc, #68]	; (80026c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800267e:	5cd3      	ldrb	r3, [r2, r3]
 8002680:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a0d      	ldr	r2, [pc, #52]	; (80026bc <HAL_RCC_GetSysClockFreq+0x98>)
 8002686:	fb02 f203 	mul.w	r2, r2, r3
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	e004      	b.n	800269e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a0c      	ldr	r2, [pc, #48]	; (80026c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002698:	fb02 f303 	mul.w	r3, r2, r3
 800269c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	613b      	str	r3, [r7, #16]
      break;
 80026a2:	e002      	b.n	80026aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026a4:	4b05      	ldr	r3, [pc, #20]	; (80026bc <HAL_RCC_GetSysClockFreq+0x98>)
 80026a6:	613b      	str	r3, [r7, #16]
      break;
 80026a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026aa:	693b      	ldr	r3, [r7, #16]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	371c      	adds	r7, #28
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40021000 	.word	0x40021000
 80026bc:	007a1200 	.word	0x007a1200
 80026c0:	08002f40 	.word	0x08002f40
 80026c4:	08002f50 	.word	0x08002f50
 80026c8:	003d0900 	.word	0x003d0900

080026cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026d4:	4b0a      	ldr	r3, [pc, #40]	; (8002700 <RCC_Delay+0x34>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a0a      	ldr	r2, [pc, #40]	; (8002704 <RCC_Delay+0x38>)
 80026da:	fba2 2303 	umull	r2, r3, r2, r3
 80026de:	0a5b      	lsrs	r3, r3, #9
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	fb02 f303 	mul.w	r3, r2, r3
 80026e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026e8:	bf00      	nop
  }
  while (Delay --);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	1e5a      	subs	r2, r3, #1
 80026ee:	60fa      	str	r2, [r7, #12]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1f9      	bne.n	80026e8 <RCC_Delay+0x1c>
}
 80026f4:	bf00      	nop
 80026f6:	bf00      	nop
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr
 8002700:	2000005c 	.word	0x2000005c
 8002704:	10624dd3 	.word	0x10624dd3

08002708 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e041      	b.n	800279e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d106      	bne.n	8002734 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7ff f85a 	bl	80017e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2202      	movs	r2, #2
 8002738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3304      	adds	r3, #4
 8002744:	4619      	mov	r1, r3
 8002746:	4610      	mov	r0, r2
 8002748:	f000 fa56 	bl	8002bf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
	...

080027a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d001      	beq.n	80027c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e035      	b.n	800282c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2202      	movs	r2, #2
 80027c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f042 0201 	orr.w	r2, r2, #1
 80027d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a16      	ldr	r2, [pc, #88]	; (8002838 <HAL_TIM_Base_Start_IT+0x90>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d009      	beq.n	80027f6 <HAL_TIM_Base_Start_IT+0x4e>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ea:	d004      	beq.n	80027f6 <HAL_TIM_Base_Start_IT+0x4e>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a12      	ldr	r2, [pc, #72]	; (800283c <HAL_TIM_Base_Start_IT+0x94>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d111      	bne.n	800281a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2b06      	cmp	r3, #6
 8002806:	d010      	beq.n	800282a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0201 	orr.w	r2, r2, #1
 8002816:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002818:	e007      	b.n	800282a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f042 0201 	orr.w	r2, r2, #1
 8002828:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	40012c00 	.word	0x40012c00
 800283c:	40000400 	.word	0x40000400

08002840 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d020      	beq.n	80028a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d01b      	beq.n	80028a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f06f 0202 	mvn.w	r2, #2
 8002874:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f998 	bl	8002bc0 <HAL_TIM_IC_CaptureCallback>
 8002890:	e005      	b.n	800289e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f98b 	bl	8002bae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 f99a 	bl	8002bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	f003 0304 	and.w	r3, r3, #4
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d020      	beq.n	80028f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d01b      	beq.n	80028f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f06f 0204 	mvn.w	r2, #4
 80028c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2202      	movs	r2, #2
 80028c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f972 	bl	8002bc0 <HAL_TIM_IC_CaptureCallback>
 80028dc:	e005      	b.n	80028ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f965 	bl	8002bae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 f974 	bl	8002bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d020      	beq.n	800293c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	2b00      	cmp	r3, #0
 8002902:	d01b      	beq.n	800293c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f06f 0208 	mvn.w	r2, #8
 800290c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2204      	movs	r2, #4
 8002912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f94c 	bl	8002bc0 <HAL_TIM_IC_CaptureCallback>
 8002928:	e005      	b.n	8002936 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f93f 	bl	8002bae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f94e 	bl	8002bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	f003 0310 	and.w	r3, r3, #16
 8002942:	2b00      	cmp	r3, #0
 8002944:	d020      	beq.n	8002988 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f003 0310 	and.w	r3, r3, #16
 800294c:	2b00      	cmp	r3, #0
 800294e:	d01b      	beq.n	8002988 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f06f 0210 	mvn.w	r2, #16
 8002958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2208      	movs	r2, #8
 800295e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f926 	bl	8002bc0 <HAL_TIM_IC_CaptureCallback>
 8002974:	e005      	b.n	8002982 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f919 	bl	8002bae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f928 	bl	8002bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00c      	beq.n	80029ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b00      	cmp	r3, #0
 800299a:	d007      	beq.n	80029ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f06f 0201 	mvn.w	r2, #1
 80029a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7fe fdf2 	bl	8001590 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00c      	beq.n	80029d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d007      	beq.n	80029d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 fa6f 	bl	8002eae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00c      	beq.n	80029f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d007      	beq.n	80029f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f8f8 	bl	8002be4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	f003 0320 	and.w	r3, r3, #32
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00c      	beq.n	8002a18 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f003 0320 	and.w	r3, r3, #32
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d007      	beq.n	8002a18 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f06f 0220 	mvn.w	r2, #32
 8002a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 fa42 	bl	8002e9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a18:	bf00      	nop
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d101      	bne.n	8002a3c <HAL_TIM_ConfigClockSource+0x1c>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	e0b4      	b.n	8002ba6 <HAL_TIM_ConfigClockSource+0x186>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2202      	movs	r2, #2
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68ba      	ldr	r2, [r7, #8]
 8002a6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a74:	d03e      	beq.n	8002af4 <HAL_TIM_ConfigClockSource+0xd4>
 8002a76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a7a:	f200 8087 	bhi.w	8002b8c <HAL_TIM_ConfigClockSource+0x16c>
 8002a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a82:	f000 8086 	beq.w	8002b92 <HAL_TIM_ConfigClockSource+0x172>
 8002a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a8a:	d87f      	bhi.n	8002b8c <HAL_TIM_ConfigClockSource+0x16c>
 8002a8c:	2b70      	cmp	r3, #112	; 0x70
 8002a8e:	d01a      	beq.n	8002ac6 <HAL_TIM_ConfigClockSource+0xa6>
 8002a90:	2b70      	cmp	r3, #112	; 0x70
 8002a92:	d87b      	bhi.n	8002b8c <HAL_TIM_ConfigClockSource+0x16c>
 8002a94:	2b60      	cmp	r3, #96	; 0x60
 8002a96:	d050      	beq.n	8002b3a <HAL_TIM_ConfigClockSource+0x11a>
 8002a98:	2b60      	cmp	r3, #96	; 0x60
 8002a9a:	d877      	bhi.n	8002b8c <HAL_TIM_ConfigClockSource+0x16c>
 8002a9c:	2b50      	cmp	r3, #80	; 0x50
 8002a9e:	d03c      	beq.n	8002b1a <HAL_TIM_ConfigClockSource+0xfa>
 8002aa0:	2b50      	cmp	r3, #80	; 0x50
 8002aa2:	d873      	bhi.n	8002b8c <HAL_TIM_ConfigClockSource+0x16c>
 8002aa4:	2b40      	cmp	r3, #64	; 0x40
 8002aa6:	d058      	beq.n	8002b5a <HAL_TIM_ConfigClockSource+0x13a>
 8002aa8:	2b40      	cmp	r3, #64	; 0x40
 8002aaa:	d86f      	bhi.n	8002b8c <HAL_TIM_ConfigClockSource+0x16c>
 8002aac:	2b30      	cmp	r3, #48	; 0x30
 8002aae:	d064      	beq.n	8002b7a <HAL_TIM_ConfigClockSource+0x15a>
 8002ab0:	2b30      	cmp	r3, #48	; 0x30
 8002ab2:	d86b      	bhi.n	8002b8c <HAL_TIM_ConfigClockSource+0x16c>
 8002ab4:	2b20      	cmp	r3, #32
 8002ab6:	d060      	beq.n	8002b7a <HAL_TIM_ConfigClockSource+0x15a>
 8002ab8:	2b20      	cmp	r3, #32
 8002aba:	d867      	bhi.n	8002b8c <HAL_TIM_ConfigClockSource+0x16c>
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d05c      	beq.n	8002b7a <HAL_TIM_ConfigClockSource+0x15a>
 8002ac0:	2b10      	cmp	r3, #16
 8002ac2:	d05a      	beq.n	8002b7a <HAL_TIM_ConfigClockSource+0x15a>
 8002ac4:	e062      	b.n	8002b8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6818      	ldr	r0, [r3, #0]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	6899      	ldr	r1, [r3, #8]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	f000 f96a 	bl	8002dae <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ae8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	609a      	str	r2, [r3, #8]
      break;
 8002af2:	e04f      	b.n	8002b94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6818      	ldr	r0, [r3, #0]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	6899      	ldr	r1, [r3, #8]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f000 f953 	bl	8002dae <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689a      	ldr	r2, [r3, #8]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b16:	609a      	str	r2, [r3, #8]
      break;
 8002b18:	e03c      	b.n	8002b94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6818      	ldr	r0, [r3, #0]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	6859      	ldr	r1, [r3, #4]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	461a      	mov	r2, r3
 8002b28:	f000 f8ca 	bl	8002cc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2150      	movs	r1, #80	; 0x50
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 f921 	bl	8002d7a <TIM_ITRx_SetConfig>
      break;
 8002b38:	e02c      	b.n	8002b94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6818      	ldr	r0, [r3, #0]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	6859      	ldr	r1, [r3, #4]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	461a      	mov	r2, r3
 8002b48:	f000 f8e8 	bl	8002d1c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2160      	movs	r1, #96	; 0x60
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 f911 	bl	8002d7a <TIM_ITRx_SetConfig>
      break;
 8002b58:	e01c      	b.n	8002b94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6818      	ldr	r0, [r3, #0]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	6859      	ldr	r1, [r3, #4]
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	461a      	mov	r2, r3
 8002b68:	f000 f8aa 	bl	8002cc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2140      	movs	r1, #64	; 0x40
 8002b72:	4618      	mov	r0, r3
 8002b74:	f000 f901 	bl	8002d7a <TIM_ITRx_SetConfig>
      break;
 8002b78:	e00c      	b.n	8002b94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4619      	mov	r1, r3
 8002b84:	4610      	mov	r0, r2
 8002b86:	f000 f8f8 	bl	8002d7a <TIM_ITRx_SetConfig>
      break;
 8002b8a:	e003      	b.n	8002b94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b90:	e000      	b.n	8002b94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b083      	sub	sp, #12
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr

08002bd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr
	...

08002bf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a2b      	ldr	r2, [pc, #172]	; (8002cb8 <TIM_Base_SetConfig+0xc0>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d007      	beq.n	8002c20 <TIM_Base_SetConfig+0x28>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c16:	d003      	beq.n	8002c20 <TIM_Base_SetConfig+0x28>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a28      	ldr	r2, [pc, #160]	; (8002cbc <TIM_Base_SetConfig+0xc4>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d108      	bne.n	8002c32 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a20      	ldr	r2, [pc, #128]	; (8002cb8 <TIM_Base_SetConfig+0xc0>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d007      	beq.n	8002c4a <TIM_Base_SetConfig+0x52>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c40:	d003      	beq.n	8002c4a <TIM_Base_SetConfig+0x52>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a1d      	ldr	r2, [pc, #116]	; (8002cbc <TIM_Base_SetConfig+0xc4>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d108      	bne.n	8002c5c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a0d      	ldr	r2, [pc, #52]	; (8002cb8 <TIM_Base_SetConfig+0xc0>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d103      	bne.n	8002c90 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	691a      	ldr	r2, [r3, #16]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d005      	beq.n	8002cae <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	f023 0201 	bic.w	r2, r3, #1
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	611a      	str	r2, [r3, #16]
  }
}
 8002cae:	bf00      	nop
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr
 8002cb8:	40012c00 	.word	0x40012c00
 8002cbc:	40000400 	.word	0x40000400

08002cc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	f023 0201 	bic.w	r2, r3, #1
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f023 030a 	bic.w	r3, r3, #10
 8002cfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	621a      	str	r2, [r3, #32]
}
 8002d12:	bf00      	nop
 8002d14:	371c      	adds	r7, #28
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr

08002d1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b087      	sub	sp, #28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	f023 0210 	bic.w	r2, r3, #16
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	031b      	lsls	r3, r3, #12
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d58:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	621a      	str	r2, [r3, #32]
}
 8002d70:	bf00      	nop
 8002d72:	371c      	adds	r7, #28
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bc80      	pop	{r7}
 8002d78:	4770      	bx	lr

08002d7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b085      	sub	sp, #20
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
 8002d82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	f043 0307 	orr.w	r3, r3, #7
 8002d9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	609a      	str	r2, [r3, #8]
}
 8002da4:	bf00      	nop
 8002da6:	3714      	adds	r7, #20
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr

08002dae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b087      	sub	sp, #28
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	60f8      	str	r0, [r7, #12]
 8002db6:	60b9      	str	r1, [r7, #8]
 8002db8:	607a      	str	r2, [r7, #4]
 8002dba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dc8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	021a      	lsls	r2, r3, #8
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	609a      	str	r2, [r3, #8]
}
 8002de2:	bf00      	nop
 8002de4:	371c      	adds	r7, #28
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr

08002dec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d101      	bne.n	8002e04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e00:	2302      	movs	r3, #2
 8002e02:	e041      	b.n	8002e88 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a14      	ldr	r2, [pc, #80]	; (8002e94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d009      	beq.n	8002e5c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e50:	d004      	beq.n	8002e5c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a10      	ldr	r2, [pc, #64]	; (8002e98 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d10c      	bne.n	8002e76 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	40012c00 	.word	0x40012c00
 8002e98:	40000400 	.word	0x40000400

08002e9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bc80      	pop	{r7}
 8002eac:	4770      	bx	lr

08002eae <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr

08002ec0 <__libc_init_array>:
 8002ec0:	b570      	push	{r4, r5, r6, lr}
 8002ec2:	2600      	movs	r6, #0
 8002ec4:	4d0c      	ldr	r5, [pc, #48]	; (8002ef8 <__libc_init_array+0x38>)
 8002ec6:	4c0d      	ldr	r4, [pc, #52]	; (8002efc <__libc_init_array+0x3c>)
 8002ec8:	1b64      	subs	r4, r4, r5
 8002eca:	10a4      	asrs	r4, r4, #2
 8002ecc:	42a6      	cmp	r6, r4
 8002ece:	d109      	bne.n	8002ee4 <__libc_init_array+0x24>
 8002ed0:	f000 f822 	bl	8002f18 <_init>
 8002ed4:	2600      	movs	r6, #0
 8002ed6:	4d0a      	ldr	r5, [pc, #40]	; (8002f00 <__libc_init_array+0x40>)
 8002ed8:	4c0a      	ldr	r4, [pc, #40]	; (8002f04 <__libc_init_array+0x44>)
 8002eda:	1b64      	subs	r4, r4, r5
 8002edc:	10a4      	asrs	r4, r4, #2
 8002ede:	42a6      	cmp	r6, r4
 8002ee0:	d105      	bne.n	8002eee <__libc_init_array+0x2e>
 8002ee2:	bd70      	pop	{r4, r5, r6, pc}
 8002ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ee8:	4798      	blx	r3
 8002eea:	3601      	adds	r6, #1
 8002eec:	e7ee      	b.n	8002ecc <__libc_init_array+0xc>
 8002eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ef2:	4798      	blx	r3
 8002ef4:	3601      	adds	r6, #1
 8002ef6:	e7f2      	b.n	8002ede <__libc_init_array+0x1e>
 8002ef8:	08002f54 	.word	0x08002f54
 8002efc:	08002f54 	.word	0x08002f54
 8002f00:	08002f54 	.word	0x08002f54
 8002f04:	08002f58 	.word	0x08002f58

08002f08 <memset>:
 8002f08:	4603      	mov	r3, r0
 8002f0a:	4402      	add	r2, r0
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d100      	bne.n	8002f12 <memset+0xa>
 8002f10:	4770      	bx	lr
 8002f12:	f803 1b01 	strb.w	r1, [r3], #1
 8002f16:	e7f9      	b.n	8002f0c <memset+0x4>

08002f18 <_init>:
 8002f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f1a:	bf00      	nop
 8002f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f1e:	bc08      	pop	{r3}
 8002f20:	469e      	mov	lr, r3
 8002f22:	4770      	bx	lr

08002f24 <_fini>:
 8002f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f26:	bf00      	nop
 8002f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f2a:	bc08      	pop	{r3}
 8002f2c:	469e      	mov	lr, r3
 8002f2e:	4770      	bx	lr
